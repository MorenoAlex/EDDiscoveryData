ACTIONFILE V4

ENABLED True

INSTALL LongDescription="Ceci est la version 12 du pack de voix pour EDD, pour la version 10.6+\r\n***Ceci désactivera les packs de voix précédents***\r\n\r\nIl vocalisera la plupart des évènements reçus, et vous souhaitera la bienvenue au démarrage et à la fermeture du programme. \nCertains événements ne sont pas vocalisés si ils ne contiennent pas d'informations liées à l'utilisateur ou si ils apparaissent uniquement au démarrage.\r\n\r\nLes paroles et la sélection de la voix peuvent être réglées via le menu option de l'Add-Ons.\r\n\r\nL'équipe d'ED Discovery espère que vous apprécierez cette fonctionnalité.\r\n\r\nDes voix supplémentaires peuvent être achetées en ligne. Les voix Ivona sont habituellement utilisées car elles sont compatabile avec l'interface SAPI 5 et peuvent être achetées individuellement sur www.textaloud.com. Les voix doivent être compatibles SAPI 5 pour pouvoir être utilisées avec EDDiscovery.\r\nFonds sonore des NPC (C) Frontier Developments"
INSTALL ShortDescription="Fichier de voix pour ED"
INSTALL Version=12.2.0.0
INSTALL MinEDVersion=10.6.0.0
INSTALL Location=Actions
INSTALL DisableOther1=VoicePackV1
INSTALL DisableOther2=VoicePackV2
INSTALL DisableOther3=VoicePackV3
INSTALL DisableOther4=VoicePackV4
INSTALL DisableOther5=VoicePackV5
INSTALL DisableOther6=VoicePackV6
INSTALL DisableOther7=VoicePackV8
INSTALL DisableOther8=VoicePackV9
INSTALL DisableOther9=VoicePackV10
INSTALL DisableOther9=VoicePackV11
INSTALL DisableOther9=VoicePackV12
INSTALL OtherFile1=npcmix.mp3;Sounds
INSTALL OtherFile2=npcprefix.mp3;Sounds
INSTALL OtherFile3=npcpostfix.mp3;Sounds

GROUP Combat
EVENT Bounty, GenericResponse, "", Condition AlwaysTrue
EVENT BuyAmmo, GenericResponse, "", Condition AlwaysTrue
EVENT CapShipBond, GenericResponse, "", Condition AlwaysTrue
EVENT CockpitBreached, GenericResponse, Volume=100, Condition AlwaysTrue
EVENT CommitCrime, CommitCrime, "", Condition AlwaysTrue
EVENT DockFighter, GenericResponse, "", Condition AlwaysTrue
EVENT EscapeInterdiction, GenericResponse, "", Condition AlwaysTrue
EVENT FactionKillBond, GenericResponse, "", Condition AlwaysTrue
EVENT FighterDestroyed, GenericResponse, "", Condition AlwaysTrue
EVENT FighterRebuilt, GenericResponse, "", Condition AlwaysTrue
EVENT Interdicted, GenericResponse, "", Condition AlwaysTrue
EVENT Interdiction, Interdiction, "", Condition AlwaysTrue
EVENT LaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT PayFines, GenericResponse, "", Condition AlwaysTrue
EVENT PayBounties, GenericResponse, "", Condition AlwaysTrue
EVENT PayLegacyFines, GenericResponse, "", Condition AlwaysTrue
EVENT PVPKill, GenericResponse, "", Condition AlwaysTrue
EVENT RedeemVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT Scanned, GenericResponse, "", Condition AlwaysTrue
EVENT ShieldState, ShieldState, "", Condition AlwaysTrue
EVENT ShipTargeted, ShipTargeted, "", Condition AlwaysTrue

GROUP CommunityGoals
EVENT CollectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoal, CommunityGoal, "", Condition AlwaysTrue
EVENT CommunityGoalDiscard, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalJoin, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalReward, GenericResponse, "", Condition AlwaysTrue

GROUP Crew
EVENT ChangeCrewRole, GenericResponse, "", Condition AlwaysTrue
EVENT CrewAssign, GenericResponse, "", Condition AlwaysTrue
EVENT CrewFire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewHire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewLaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberJoins, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberRoleChange, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberQuits, GenericResponse, "", Condition AlwaysTrue
EVENT EndCrewSession, GenericResponse, "", Condition AlwaysTrue
EVENT JoinACrew, GenericResponse, "", Condition AlwaysTrue
EVENT KickCrewMember, GenericResponse, "", Condition AlwaysTrue
EVENT NpcCrewPaidWage, GenericResponse, "", Condition AlwaysTrue
EVENT NpcCrewRank, GenericResponse, "", Condition AlwaysTrue
EVENT QuitACrew, GenericResponse, "", Condition AlwaysTrue

GROUP Engineering/Synthesis
EVENT EngineerApply, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerCraft, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerContribution, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerProgress, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerLegacyConvert, GenericResponse, "", Condition AlwaysTrue
EVENT Synthesis, GenericResponse, "", Condition AlwaysTrue
EVENT TechnologyBroker, GenericResponse, "", Condition AlwaysTrue

GROUP Exploration
EVENT BuyExplorationData, GenericResponse, "", Condition AlwaysTrue
EVENT CodexEntry, GenericResponse, "", Condition AlwaysTrue
EVENT DiscoveryScan, GenericResponse, "", Condition AlwaysTrue
EVENT FSSAllBodiesFound, FSSAllBodiesFound, "", Condition AlwaysTrue
EVENT FSSDiscoveryScan, GenericResponse, "", Condition AlwaysTrue
EVENT FSSSignalDiscovered, FSSSignalDiscovered, QueueLimit=4000, Condition AlwaysTrue
EVENT NavBeaconScan, NavBeaconScan, "", Condition AlwaysTrue
EVENT MultiSellExplorationData, MultiSellExplorationData, "", Condition AlwaysTrue
EVENT Scan, Scan, "", Condition AlwaysTrue
EVENT SAAScanComplete, GenericResponse, "", Condition AlwaysTrue
EVENT SellExplorationData, SellExplorationData, "", Condition AlwaysTrue

GROUP Flight
EVENT ApproachBody, GenericResponse, QueueLimit=5000, Condition AlwaysTrue
EVENT ApproachSettlement, GenericResponse, QueueLimit=1000, Condition AlwaysTrue
EVENT Docked, GenericResponse, "", Condition AlwaysTrue
EVENT DockingCancelled, GenericResponse, "", Condition AlwaysTrue
EVENT DockingDenied, GenericResponse, "", Condition AlwaysTrue
EVENT DockingGranted, GenericDelayedResponse, Delay=10000, Condition AlwaysTrue
EVENT DockingRequested, GenericResponse, "", Condition AlwaysTrue
EVENT DockingTimeout, GenericResponse, "", Condition AlwaysTrue
EVENT DockSRV, GenericResponse, "", Condition AlwaysTrue
EVENT FSDJump, FSDResponse, QueueLimit=5000, Condition AlwaysTrue
EVENT FuelScoop, GenericResponse, QueueLimit=3000, Condition AlwaysTrue
EVENT JetConeBoost, GenericResponse, "", Condition AlwaysTrue
EVENT JetConeDamage, GenericResponse, "", Condition AlwaysTrue
EVENT LeaveBody, GenericResponse, QueueLimit=5000, Condition AlwaysTrue
EVENT LaunchSRV, GenericResponse, "", Condition AlwaysTrue
EVENT Liftoff, GenericResponse, "", Condition AlwaysTrue
EVENT StartJump, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseEntry, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseExit, SupercruiseExit, "", Condition AlwaysTrue
EVENT Touchdown, GenericResponse, "", Condition AlwaysTrue
EVENT Undocked, GenericResponse, "", Condition AlwaysTrue
EVENT USSDrop, GenericResponse, "", Condition AlwaysTrue

GROUP Missions
EVENT MissionAbandoned, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAccepted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionCompleted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionFailed, GenericResponse, "", Condition AlwaysTrue
EVENT MissionRedirected, GenericResponse, "", Condition AlwaysTrue

GROUP Mining
EVENT AsteroidCracked, GenericResponse, "", Condition AlwaysTrue
EVENT MiningRefined, GenericResponse, "", Condition AlwaysTrue

GROUP Materials
EVENT MaterialCollected, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscarded, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscovered, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialTrade, GenericResponse, "", Condition AlwaysTrue

GROUP Misc
EVENT ClearSavedGame, GenericResponse, "", Condition AlwaysTrue
EVENT Died, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkScan, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT DataScanned, GenericResponse, "", Condition AlwaysTrue
EVENT Friends, Friends, "", Condition AlwaysTrue
EVENT Promotion, GenericResponse, "", Condition AlwaysTrue
EVENT ReceiveText, ReceiveText, "", Condition AlwaysTrue
EVENT Resurrect, GenericResponse, "", Condition AlwaysTrue
EVENT ScientificResearch, GenericResponse, "", Condition AlwaysTrue
EVENT Screenshot, GenericResponse, "", Condition AlwaysTrue
EVENT SearchAndRescue, GenericResponse, "", Condition AlwaysTrue
EVENT SendText, GenericResponse, "", Condition AlwaysTrue

GROUP Powerplay
EVENT PowerplayCollect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDefect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDeliver, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayFastTrack, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayJoin, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayLeave, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplaySalary, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVote, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVoucher, GenericResponse, "", Condition AlwaysTrue

GROUP Ship/SRV
EVENT AfmuRepairs, GenericResponse, "", Condition AlwaysTrue
EVENT BuyDrones, GenericResponse, "", Condition AlwaysTrue
EVENT FetchRemoteModule, GenericResponse, "", Condition AlwaysTrue
EVENT HeatDamage, GenericResponse, "", Condition AlwaysTrue
EVENT HeatWarning, GenericResponse, "", Condition AlwaysTrue
EVENT HullDamage, HullDamage, "", Condition AlwaysTrue
EVENT LaunchDrone, GenericResponse, "", Condition AlwaysTrue
EVENT MassModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleRetrieve, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSell, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSellRemote, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSwap, GenericResponse, "", Condition AlwaysTrue
EVENT SellShipOnRebuy, GenericResponse, "", Condition AlwaysTrue
EVENT SellDrones, GenericResponse, "", Condition AlwaysTrue
EVENT SetUserShipName, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardNew, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSell, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSwap, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardTransfer, GenericResponse, "", Condition AlwaysTrue
EVENT SRVDestroyed, GenericResponse, "", Condition AlwaysTrue
EVENT RebootRepair, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelAll, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelPartial, GenericResponse, "", Condition AlwaysTrue
EVENT Repair, GenericResponse, "", Condition AlwaysTrue
EVENT RepairDrone, GenericResponse, "", Condition AlwaysTrue
EVENT RepairAll, GenericResponse, "", Condition AlwaysTrue
EVENT RestockVehicle, GenericResponse, "", Condition AlwaysTrue
EVENT SelfDestruct, GenericResponse, "", Condition AlwaysTrue
EVENT SystemsShutdown, GenericResponse, "", Condition AlwaysTrue
EVENT VehicleSwitch, GenericResponse, "", Condition AlwaysTrue

GROUP Squadron
EVENT AppliedToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT DisbandedSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT InvitedToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT JoinedSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT KickedFromSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT LeftSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT SharedBookmarkToSquadron, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronCreated, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronDemotion, GenericResponse, "", Condition AlwaysTrue
EVENT SquadronPromotion, GenericResponse, "", Condition AlwaysTrue
EVENT WonATrophyForSquadron, GenericResponse, "", Condition AlwaysTrue

GROUP Trading
EVENT BuyTradeData, GenericResponse, "", Condition AlwaysTrue
EVENT CargoDepot, GenericResponse, "", Condition AlwaysTrue
EVENT EjectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT MarketBuy, GenericResponse, "", Condition AlwaysTrue
EVENT MarketSell, MarketSell, "", Condition AlwaysTrue

GROUP Wings
EVENT WingAdd, GenericResponse, "", Condition AlwaysTrue
EVENT WingJoin, GenericResponse, "", Condition AlwaysTrue
EVENT WingLeave, GenericResponse, "", Condition AlwaysTrue
EVENT WingInvite, GenericResponse, "", Condition AlwaysTrue

GROUP Initialise
EVENT onRefreshEnd, onRefreshEnd, "", Condition AlwaysTrue
EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT onShutdown, onShutdown, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onSayFinished, SaySystemInfo, "", EventName $== FSD
EVENT onKeyPress, SaySystemInfo, "", KeyPress $== Alt+F11
EVENT onTimer, SaySystemInfo, "", TimerName $== ScanDelay
EVENT onMenuItem, Menus, "", MenuName Contains VoiceMenu
EVENT onTimer, GenericResponse, "", TimerName Contains VoicePackGenericDelay
EVENT onKeyPress, SayPhoneme, "", KeyPress $== Alt+F12

GROUP UIEvents
EVENT UILights, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UIFireGroup, GenericResponseUI, QueueLimit=200, Condition AlwaysTrue
EVENT UIShieldsUp, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UILandingGear, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UIHardpointsDeployed, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UIInWing, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UICargoScoopDeployed, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UISilentRunning, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UIScoopingFuel, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UISrvHandbrake, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UISrvTurret, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UISrvUnderShip, GenericResponseUI, "QueueLimit=2000,MaxRepeat=20000", Condition AlwaysTrue
EVENT UIFsdMassLocked, GenericResponseUI, "QueueLimit=2000,MaxRepeat=20000", Condition AlwaysTrue
EVENT UIFsdCharging, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UIFsdCooldown, GenericResponseUI, QueueLimit=2000, Condition AlwaysTrue
EVENT UILowFuel, GenericResponseUI, "", Condition AlwaysTrue
EVENT UIOverHeating, GenericResponseUI, QueueLimit=5000, Condition AlwaysTrue
EVENT UIBeingInterdicted, GenericResponseUI, "", Condition AlwaysTrue
EVENT UIShipTargeted, GenericResponseUI, "", EventClass_ShipTargeted_TargetLocked == 0

GROUP Other
EVENT onEDSMSync, EDSMSync, "", Condition AlwaysTrue
EVENT onEGOSync, EGOSync, "", Condition AlwaysTrue

//*************************************************************
// SetUpLanguageEnglish
//*************************************************************
PROGRAM SetUpLanguageEnglish

Static say_UILights $= "%ifnonzero(EventClass_Lights,\"Lumière allumée\",\"Lumière éteinte\")"
Static say_UIFireGroup $= "Groupe d'armement %substring(\"-ABCDEFGHIJK\",%(EventClass_Group),1) sélectionné"
Static say_UIShieldsUp $= "%iftrue(EventClass_ShieldState,\"Boucliers activés\",\"Attention, boucliers désactivés\")"
Static say_UILandingGear $= "%iftrue(EventClass_Gear,\"Train d'atterrissage déployé\",\"Train d'atterrissage rétracté\")"
Static say_UIHardpointsDeployed $= "%iftrue(EventClass_Deployed,\"Points d'emport déployés\",\"Points d'emport rétractés\")"
Static say_UIInWing $= "%iftrue(EventClass_Winged,\"Groupe rejoint\",\"Groupe quitté\")"
Static say_UICargoScoopDeployed $= "%iftrue(EventClass_Scoop,\"Récupérateur de cargaison déployé\",\"Récupérateur de cargaison rétracté\")"
Static say_UISilentRunning $= "%iftrue(EventClass_SilentRunning,\"Mode furtif activé\",\"Mode furtif désactivé\")"
Static say_UIScoopingFuel $= "%iftrue(EventClass_Scooping,\"Récupération de carburant\",\"Récupérateur de carburant désactivé\")"
Static say_UISrvHandbrake $= "%iftrue(EventClass_Handbrake,\"Frein à main activé\",\"Frein à main désactivé\")"
Static say_UISrvTurret $= "%iftrue(EventClass_Turret,\"Controle de tourelle\",\"Retour à la cabine\")"
Static say_UISrvUnderShip $= "%iftrue(EventClass_UnderShip,\"Sous le vaisseau, prêt pour récupération\", \"Vous quitter le vaisseau\")"
Static say_UIFsdMassLocked $= "%iftrue(EventClass_MassLocked,\"Champs gravitationnel, FSD non disponible\",\"Hors champs gravitationnel, FSD disponible\")"

// can't yet do the fsd uncharge, that happens on entry to FSD .. need some code to tell it not to say it.. not sure of sequencing
Static say_UIFsdCharging $= "%iftrue(EventClass_Charging,\"Chargement FSD en cours\")"

Static say_UIFsdCooldown $= "%iftrue(EventClass_CoolDown,\"\",\"FSD disponible\")"
Static say_UILowFuel $= "%iftrue(EventClass_LowFuel,\"Attention, carburant faible\",\"\")"
Static say_UIOverHeating $= "%iftrue(EventClass_OverHeating,\"Attention, surchauffe du vaisseau\",\"Temperature nominale\")"
Static say_UIBeingInterdicted $= "%iftrue(EventClass_Interdicted,\"Attention, interdiction FSD, engagez manœuvre d'évitement\",\"\")"

Static say_UIShipTargeted $= Cible perdue

// Too vocal EVENT UIIsInDanger, GenericResponseUI, "", Condition AlwaysTrue
// Static say_UIIsInDanger $= '%iftrue(EventClass_Danger,"","Hors de danger")'

Static say_welcome $= Voice Pack activé
Static say_install $= Vous avez installé le pack de voix français pour Elite Dangerous Discovery
Static say_shutdown $= Au revoir Commandant, fermeture d'Elite Dangerous Discovery
Static say_refresh $= "Bienvenue %existsdefault(RK_Class_Combat,\"\") Commandant %(Commander), %ifcontains(LAST_ShipType,\"SRV\",\"conduisant\",\"pilotant\") un %ship(LAST_ShipType) avec %hnum(LED_Credits,HNumList) crédits"

Static say_ApproachBody $= En approche de %body(EventClass_Body,EventStarSystem,say_ss)
Static say_ApproachSettlement $= En approche de %replace(EventClass_Name,'+','')
Static say_AfmuRepairs $= Module %(EventClass_ModuleLocalised) réparé à %round(EventClass_Health,0,0) pourcent
Static say_AppliedToSquadron $= Appliqué à l'escadron %(EventClass_Name)
Static say_AsteroidCracked $= %(EventClass_Body) brisé, Commandant

Static say_Bounty $= "La prime pour ce vaiseau est de %hnum(EventClass_TotalReward,HNumList) crédits, membre de la faction %rs(\"%alt(EventClass_VictimFactionLocalised,EventClass_VictimFaction)\",say_ss)"
Static say_BuyAmmo $= Munitions achétées pour %(EventClass_Cost) crédits
Static say_BuyExplorationData $= Carte du système stellaire %star(EventClass_System,say_ss) achetée pour %(EventClass_Cost) crédits
Static say_BuyDrones $= %(EventClass_Count) %(EventClass_Type) achetés pour un total de %(EventClass_TotalCost) crédits
Static say_BuyTradeData $= Données commerciales du système %star(EventClass_System,say_ss) achetées pour %(EventClass_Cost) crédits

Static say_CargoDepot $= "%ifequal(EventClass_UpdateEnum,\"Collect\",\"{%(EventClass_Count) %(EventClass_FriendlyCargoType) récupérés \")"
Static say_CargoDepot $+= "%ifequal(EventClass_UpdateEnum,\"Deliver\",\"{%(EventClass_Count) %(EventClass_FriendlyCargoType) livrés \")"
Static say_CargoDepot $+= "%ifequal(EventClass_UpdateEnum,\"WingUpdate\",\"Information du groupe sur la mission de livraison \")"
Static say_CargoDepot $+= "%(EventClass_ItemsToGo) éléments restant, %round(EventClass_ProgressPercent,1,\"0.#\") pourcent."

Static say_CapShipBond $= Reward for capital ship combat from faction %rs(EventClass_AwardingFaction,say_ss) against %rs(EventClass_VictimFaction,say_ss), %(EventClass_Reward) crédits
Static say_CockpitBreached $= Alert, Alert, Cockpit breached. Head for station now;Emergency, loss of Cockpit Canopy, abort;Emergency, Cockpit Canopy is breached
Static say_CollectCargo $= "{Picked up;Collected;Scooped up} %(EventClass_FriendlyType) %iftrue(EventClass_Stolen,\", Warning Commandant, this cargo is stolen\")"
Static say_CommitCrimeFine $= Fine committed Commandant, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), cost %(EventClass_Fine) crédits
Static say_CommitCrimeBounty $= Crime committed Commandant, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), bounty on you is %(EventClass_Bounty) crédits
Static say_CommunityGoal $= Current community goals are %(EventClass_CommunityGoalList)
Static say_CommunityGoalJoin $= Joining the community goal %sc(EventClass_Name), located at system %star(EventClass_System,say_ss)
Static say_CommunityGoalReward $= Community goal %sc(EventClass_Name), located at system %star(EventClass_System,say_ss), rewarded you with %hnum(EventClass_Reward,HNumList) crédits
Static say_CommunityGoalDiscard $= Opting out of community goal %sc(EventClass_Name), located at system %star(EventClass_System,say_ss)
Static say_CrewAssign $= "Crew member %(EventClass_Name), %ifequal(EventClass_Role,\"Active\",\" reporting for duty\",\" placed on %(EventClass_Role)\")"
Static say_CrewFire $= {Crew member %(EventClass_Name) }fired;dismissed;is paid off, goodbye sucker
Static say_CrewHire $= "{Hired new crew member %(EventClass_Name)%ifnotempty(EventClass_Faction,\", of faction %rs(EventClass_Faction,say_ss)\"), rank %(EventClass_CombatRank), costing %(EventClass_Cost) crédits.} Welcome to the team; Welcome onboard"

Static say_ChangeCrewRole $= Crew role changed to %(EventClass_Role);Swapped control to %(EventClass_Role)
Static say_CrewMemberJoins $= Crew member %(EventClass_Crew) joins us on the %(EventShip_ShortName), Welcome Commandant;Welcome Commandant %(EventClass_Crew) to our ship
Static say_CrewMemberQuits $= Crew member %(EventClass_Crew) quits;Commandant %(EventClass_Crew) left
Static say_CrewLaunchFighter $= %(EventClass_Crew) lauched Fighter;Fighter away, pilot %(EventClass_Crew)
Static say_CrewMemberRoleChange $= %(EventClass_Crew) changed role to %(EventClass_Role)
Static say_JoinACrew $= Joining Commandant %(EventClass_Captain) as crew member;Signing on for service with %(EventClass_Captain)
Static say_QuitACrew $= Leaving Commandant %(EventClass_Captain) ship;Resigning my commission, Commandant %(EventClass_Captain)
Static say_KickCrewMember $= Kicking %(EventClass_Crew);Removed crew %(EventClass_Crew);%(EventClass_Crew) is removed from the ship

Static say_ClearSavedGame $= Wow thats a lot of crédits thrown away, game save cleared!;Game wiped.
Static say_CodexEntry $= Codex entry %(EventClass_Name_Localised) created

Static say_DatalinkVoucher $= Données scannées, valeur estimée à %(EventClass_Reward) crédits de la part de %rs(EventClass_PayeeFaction,say_ss)
Static say_DatalinkScan $= Données scannée, %(EventClass_MessageLocalised)
Static say_DataScanned $= %sc(EventClass_Type) scanné
Static say_DiscoveryScan $= %(EventClass_Bodies) corps celeste détectés dans ce système
Static say_Died $= Désolé, Commandant %(Commander)
Static say_Docked $= "{Arrimé à %(EventClass_StationName), %ifnotempty(EventClass_StationType,\"Type %(EventClass_StationType)\")}{. }{Son secteur économique est de type %(EventClass_Economy_Localised)}"
Static say_DockSRV $= SRV de retour à bord, Commandant
Static say_DockingDenied $= Demande d'appontage refusée, les plateformes sont toutes occupées;Demande d'appontage refusée, Commandant
Static say_DockingGranted $= Commandant, appontage confirmé sur la plateforme %(EventClass_LandingPad)
Static say_DockingRequested $= Demande d'appontage envoyée
Static say_DockingTimeout $= La demande d'appontage a expirée, Commandant
Static say_DockingCancelled $= Demande d'appontage annulée
Static say_DockFighter $= Chasseur de retour à bord, Commandant

Static say_DisbandedSquadron $= Escadron %(EventClass_Name) dissout, Commandant

Static say_edsmscannoinfo $= Aucune information disponible sur ce système.
Static say_edsmscanstarsplanets $= Il y a %(totalstars) étoiles et %(totalplanets) planètes dans ce système

Static say_edsmscanstarinfo $= "%(type) %star(starbodyname,say_ss), Type %(startype), Masse %roundnz(mass,1,0.#,4) soleils, %ifnonzero(planets,\" %(planets) planètes\")"
Static say_edsmscanstarnoinfo $= "Aucune information sur %(type) %star(ownname,say_ss), %ifnonzero(planets,\" %(planets) planètes\"). "
Static say_edsmscanstarbarycentre $= "Étoile centrale %star(ownname,say_ss), %ifnonzero(planets,\" %(planets) planètes\"). "

Static say_edsmscanbodystarinfo $= "%star(pname,say_ss), %sc(stype), masse %roundnz(mass,1,0.#,4) soleils. "
Static say_edsmscanbodyinfo $= "%body(pname,EventStarSystem,say_ss), %(terraform)%(class)%ifnotcontains(landable,\"Non \",\", atterrisable\")"
Static say_edsmscanbodyinfoAtmos $= "%ifnotempty(atmos,\", %(atmos)\")%ifnotcontains(atmos,\"atmosphère\",\" atmosphère \",\"\",\"\")"
Static say_edsmscanbodyinfoVolcanism $= "%ifnotempty(volcanism, \", %(volcanisme)\")"
Static say_edsmscanbodyinfoMat $= ", Matériaux détectés "
Static say_edsmscanbodynoinfo $= Aucune information sur %(ownname).

Static say_EndCrewSession $= "{Crew session ended;Ending crew session}{ Commandant;}{%ifnonzero(EventClass_OnCrime,\", a crime was committed\")}"

Static say_EjectCargo $= "%iftrue(EventClass_Abandoned,\"Abandon\",\"Éjection\") de %(EventClass_Count) %(EventClass_FriendlyType) dans l'espace"

Static say_FetchRemoteModule $= Module %sc(EventClass_StoredItemLocalised) en cours de transfert pour un coût de %(EventClass_TransferCost) crédits
Static say_FactionKillBond $= Récompence de %(EventClass_Reward) crédits reçu de la faction %rs(EventClass_AwardingFaction,say_ss) pour avoir combattu %rs(EventClass_VictimFaction,say_ss)

Static say_Friends $= "%ifEqual(EventClass_Status,\"Hors ligne\",\"Ami \")%ifEqual(EventClass_Status,\"En ligne\",\"Ami \")%(EventClass_Name) %ReplaceVar(EventClass_Status,say_friendsub)"
Static say_friendsub1 $= Ajouté;a été ajouté aux amis
Static say_friendsub2 $= Demande;demande a être ajouté aux amis
Static say_friendsub3 $= En ligne;est en ligne
Static say_friendsub4 $= Hors ligne;est hors ligne
Static say_friendsub5 $= Refusé;a refusé votre demande d'amis

Static say_FighterRebuilt $= Chasseur prêt, Commandant
Static say_FighterDestroyed $= Attention, chasseur détruit

// not used Static say_FSDTarget $= Targetted system %star(EventClass_StarSystem,say_ss);%star(EventClass_StarSystem,say_ss) Selected; %star(EventClass_StarSystem,say_ss) locked in
Static say_FSSAllBodiesFound $= L'ensemble des corps du système a été trouvé, Commandant
Static say_FSSDiscoveryScan $= "%ifEQ(EventClass_Progress,100,\"\", \"%(EventClass_BodyCount) corps scannés, %round(EventClass_Progress,0,0) pourcent\")"

Static say_FSSSignalDiscovered1 $= {Détection de %(EventClass_Signals[1]_SignalName_Localised)} %ifnotempty(EventClass_Signals[1]_ThreatLevel, ', Menace %(EventClass_Signals[1]_ThreatLevel)') %ifnotempty(EventClass_Signals[1]_SpawingFaction_Localised, ', Faction %(EventClass_Signals[1]_SpawingFaction_Localised)')
Static say_FSSSignalDiscoveredN $= Détection de %(EventClass_SignalsCount) signaux

Static say_EngineerProgressRank $= Félicitation, vous avez atteint le rang de %(EventClass_Engineers[1]_Rank), auprès de l'ingénieur %(EventClass_Engineers[1]_Engineer)
Static say_EngineerProgressState $= L'ingéneur %(EventClass_Engineers[1]_Engineer) a changé votre statut en %(EventClass_Engineers[1]_Progress)
Static say_EngineerProgress $= %ifeq(EventClass_EngineersCount,1,'%ifnotempty(EventClass_Engineers[1]_Progress,say_EngineerProgressState,say_EngineerProgressRank)')

Static say_EngineerContribution $= "%ifequal(EventClass_Type,\"Credits\", \"Contribution de %(EventClass_Quantity) crédits \")"
Static say_EngineerContribution $+= "%ifequal(EventClass_Type,\"Materials\", \"Contribution de %(EventClass_Quantity) %(EventClass_Material_Localised) \")"
Static say_EngineerContribution $+= "%ifequal(EventClass_Type,\"Commodity\", \"Contribution de %(EventClass_Quantity) %(EventClass_Commodity_Localised) \")"
Static say_EngineerContribution $+= to Engineer %(EventClass_Engineer)

Static say_EngineerLegacyConvert $= Converted Legacy Engineered Module, blueprint %sc(EventClass_Engineering_FriendlyBlueprintName), from Engineer %(EventClass_Engineering_Engineer).  This is a level %(EventClass_Engineering_Level) effect

Static say_EngineerApply $= Applied blueprint %sc(EventClass_Blueprint) to ship, from Engineer %(EventClass_Engineer).  This is a level %(EventClass_Level) effect
Static say_EngineerCraft $= "Crafted blueprint %sc(EventClass_Engineering_FriendlyBlueprintName), from Engineer %(EventClass_Engineering_Engineer).  This is a level %(EventClass_Engineering_Level) effect. Ready to apply "

Static say_EscapeInterdiction $= Interdiction FSD évitée par %iftrue(EventClass_IsPlayer,say_EscapeInterdictionPlayer)%iffalse(EventClass_IsPlayer,say_EscapeInterdictionNPC)
Static say_EscapeInterdictionPlayer $= Commandant %(EventClass_Interdictor_Localised)
Static say_EscapeInterdictionNPC $= N P C %(EventClass_Interdictor_Localised)

Static say_FuelScoop $= "%ifgt(EventClass_Scooped,0.1,'{Refueled;Scooped}{ %round(EventClass_Scooped,1,0.#) tonnes, } %ifeq(EventShip_FuelCapacity,EventClass_Total,\"Réservoir plein\",\"%round(EventClass_Total,1,0.#) tonnes restantes\")')"

Static say_FSDJump $= "Arrivé à %star(EventClass_StarSystem,say_ss), %(visit)%ifnonzero(EventEDDBPopulation,\"habité, \") saut de %round(EventClass_JumpDist,1,0.#) années lumière"
Static say_FSDJumpVisit $= Première visite, ;Seconde visite, ;Troisième visite, ;Quatrième visite, ;Cinquième visite, ;Sixième visite,;
Static say_FSDJumpFuel $= , %round(EventClass_FuelUsed,1,0.#) tonnes de carburant utilisées
Static say_FSDJumpFaction $= ", Système controllé par %rs(EventClass_Faction,say_ss) %ifnotempty(EventClass_FactionState,\", %(EventClass_FactionState)\")"
Static say_FSDJumpFuelWarning $= , Attention, carburant faible

Static say_HullDamageCritical $= Alerte critique, coque à %(health) %
Static say_HullDamage $= Attention, copue à %(health) %
Static say_HeatWarning $= Attention, surchauffe du vaisseau
Static say_HeatDamage $= Alerte critique, dégats de surchauffe

Static say_InterdictionSuccess $= %iftrue(EventClass_IsPlayer,say_InterdictionSuccessPlayer) %iffalse(EventClass_IsPlayer,say_InterdictionSuccessNPC)
Static say_InterdictionSuccessPlayer $= Interdicted Human %(EventClass_CombatRank) Commandant %(EventClass_Interdicted_Localised)
Static say_InterdictionSuccessNPC $= Interdicted N P C %(EventClass_Interdicted_Localised) %ifnotempty(EventClass_Faction,say_InterdictedFaction)
Static say_InterdictionFailure $= %iftrue(EventClass_IsPlayer,say_InterdictionFailurePlayer) %iffalse(EventClass_IsPlayer,say_InterdictionFailureNPC)
Static say_InterdictionFailurePlayer $= Failed to interdict Human %(EventClass_CombatRank) Commandant %(EventClass_Interdicted_Localised)
Static say_InterdictionFailureNPC $= Failed to inderdict N P C %(EventClass_Interdicted_Localised) %ifnotempty(EventClass_Faction,say_InterdictedFaction)

Static say_Interdicted $= %iftrue(EventClass_IsPlayer,say_InterdictedPlayer) %iffalse(EventClass_IsPlayer,say_InterdictedNPC)
Static say_InterdictedPlayer $= Alerte de command hostile!, interdiction par le Commandant %(EventClass_CombatRank) nommé %(EventClass_Interdictor)
Static say_InterdictedNPC $= Alerte de vaisseau hostile!, interdiction par %(EventClass_Interdictor), %ifnotempty(EventClass_Faction,say_InterdictedFaction)
Static say_InterdictedFaction $= de la faction %rs(EventClass_Faction,say_ss)

Static say_InvitedToSquadron $= Vous êtes invité à joindre l'escadron %(EventClass_Name), Commandant

Static say_JoinedSquadron $= Vous avez rejoind l'escadron %(EventClass_Name)
Static say_JetConeBoost $= {FSD par un multiple de} <say-as interpret-as='cardinal'> %round(EventClass_BoostValue,2,0.##) </say-as>
Static say_JetConeDamage $= {Alerte, le jet de plama a endommagé le module %(EventClass_ModuleLocalised), }quittez cette zone Commandant

Static say_KickedFromSquadron $= L'escadron %(EventClass_Name) vous a éjecté, Commandant

Static say_Liftoff $= %iftrue(EventClass_PlayerControlled,'Décollage de la planète')
Static say_LaunchSRV $= Déploiement du SRV avec sa configuration %(EventClass_Loadout).
Static say_LaunchFighter $= "{Lancement du chasseur} %iftrue(EventClass_PlayerControlled,\", préparez vous à prendre les commandes\", \" piloté par un membre d'équipage\") "
Static say_LaunchDrone $= Drone %(EventClass_FriendlyType) déployé
Static say_LeaveBody $= {Départ de }%body(EventClass_Body,EventStarSystem,say_ss) , Commandant

Static say_LeftSquadron $= Vous avez quitté l'escadron %(EventClass_Name)

Static say_MaterialCollected $= Collecte de %(EventClass_Count) %(EventClass_FriendlyName)
Static say_MaterialDiscarded $= Rejé de %(EventClass_Count) %(EventClass_FriendlyName)
Static say_MaterialDiscovered $= Nouvelle découverte, %(EventClass_FriendlyName)
Static say_MaterialTrade $= Échange de %(EventClass_Paid_Quantity) %(EventClass_Paid_Material_Localised) contre %(EventClass_Received_Quantity) %(EventClass_Received_Material_Localised)
Static say_MarketBuy $= Achat de %(EventClass_Count) %(EventClass_Type_Localised), à %(EventClass_BuyPrice) crédits l'unité, soit un total de %hnum(EventClass_TotalCost,HNumList) crédits
Static say_MarketSell $= Vente de %(EventClass_Count) %(EventClass_Type_Localised), à %(EventClass_SellPrice) crédits l'unité, soit un total de %hnum(EventClass_TotalSale,HNumList) crédits, profil de %hnum(profit,HNumList) crédits
Static say_MiningRefined $= %(EventClass_FriendlyType) raffiné

Static say_MissionAbandoned $= Abandon de la mission %sc(EventClass_Name)
Static say_MissionAccepted $= "%sc(EventClass_Name) accepté %ifnotempty(EventClass_Faction,\"pour la faction %rs(EventClass_Faction,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationSystem,\" Le système de destination est %star(EventClass_DestinationSystem,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationStation,\", station %(EventClass_DestinationStation),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Target,\" la cible est %(EventClass_Target),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_TargetFaction,\" de la faction %rs(EventClass_TargetFaction,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_PassengerType,\" embarquement de %(EventClass_PassengerCount) passagers de rang %(EventClass_PassengerType).\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Expiry,\" %datedeltaformatnow(EventClass_Expiry,'Cette mission expire dans [d jours][h heures][Md minutes][Sh secondes].','Cette mission a expirée le [D]',longdatetime)\")"

Static say_MissionCompleted $= "Félicitations Commandant, la mission} %sc(EventClass_Name) %ifnotempty(EventClass_Faction,\" pour la faction %rs(EventClass_Faction,say_ss), \") a été réussie"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Target,\" la cible était %(EventClass_TargetLocalised), \")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_TargetFaction,\" de la faction %rs(EventClass_TargetFaction,say_ss), \")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Reward,\", Récompence de %hnum(EventClass_Reward,HNumList) crédits\")"
Static say_MissionFailed $= Échec de la mission %sc(EventClass_Name)
Static say_MissionRedirected $= Nouvelle destination pour la mission %sc(EventClass_Name), allez à %(EventClass_NewDestinationStation) dans le système %(EventClass_NewDestinationSystem)

Static say_ModuleBuy $= "Module %sc(EventClass_BuyItemLocalised) installé %ifnonzero(EventClass_BuyPrice,', pour %hnum(EventClass_BuyPrice,HNumList) crédits'), sur le vaisseau %ship(EventClass_Ship) dans %ifnotcontains(EventClass_Slot,\"l'emplacement\",\"l'emplacement \")%sc(EventClass_Slot)."
// when new func system comes in, fix this back to hnum.. condition execution
Static say_ModuleBuy $+= "%ifnotempty(EventClass_SellItemLocalised,\" Module vendu %(EventClass_SellItemLocalised) pour %hnum(EventClass_SellPrice,HNumList) crédits.\")"

Static say_ModuleRetrieve $= "Module %sc(EventClass_RetrievedItemLocalised) récupéré et installé sur le vaisseau %ship(EventClass_Ship) dans %ifnotcontains(EventClass_Slot,\"l'emplacement\",\"l'emplacement \")%sc(EventClass_Slot)."
Static say_ModuleSell $= "Module %sc(EventClass_SellItemLocalised) retiré et rembourser à hauteur de %hnum(EventClass_SellPrice,HNumList) crédits, depuis le vaisseau %ship(EventClass_Ship), %ifnotcontains(EventClass_Slot,\"\",\"emplacement \")%sc(EventClass_Slot)."
Static say_ModuleSellRemote $= Vente à distance du module %sc(EventClass_SellItemLocalised) au prix de %hnum(EventClass_SellPrice,HNumList) crédits.
Static say_ModuleStore $= "Module %sc(EventClass_StoredItemLocalised) retiré du vaisseau %ship(EventClass_Ship). %ifnotempty(EventClass_Cost,\"Le coût de stockage est de %(EventClass_Cost) crédits\")"
Static say_ModuleSwap $= "Échange des modules entre %ifnotcontains(EventClass_FromSlot,\"un emplacement\",\"l'emplacement \")%sc(EventClass_FromSlot) et %ifnotcontains(EventClass_ToSlot,\"un autre emplacement\",\"l'emplacement \")%sc(EventClass_ToSlot)"
Static say_MassModuleStore $= Stockage de plusieurs modules du vaisseau %ship(EventClass_Ship).

Static say_NavBeaconScan $= %(EventClass_NumBodies) corps scannés dans ce système.
Static say_NpcCrewPaidWage $= Le membre d'équipage %(EventClass_Name) a été payé de %hnum(EventClass_Amount,HNumList) crédits
Static say_NpcCrewRank $= Félicitations au membre d'équipage %(EventClass_Name) qui a été promu au rang %sc(EventClass_RankCombat)

Static say_PayBounties $= "Paiement de %(EventClass_Amount) crédits de primes%ifnonzero(EventClass_BrokerPercentage,\", avec une commission de %(EventClass_BrokerPercentage) pourcent au courtier\")"

Static say_PayFines $= "Paiement de %(EventClass_Amount) crédits d'ammendes%ifnonzero(EventClass_BrokerPercentage,\", avec une commission de %(EventClass_BrokerPercentage) pourcent au courtier\")"
Static say_PayLegacyFines $= "Paiement de %(EventClass_Amount) crédits en taxes d'héritage%ifnonzero(EventClass_BrokerPercentage,\", avec une commission de %(EventClass_BrokerPercentage) pourcent au courtier\")"
Static say_Promotion $= Félicitation Commandant, vous avez été promu
Static say_Promotion $+= "%ifnotempty(EventClass_Combat,\", Rang de combat %sc(EventClass_Combat)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Trade,\", Rang de commerce %sc(EventClass_Trade)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Explore,\", Rang d'exploration %sc(EventClass_Explore)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Federation,\", Rang Fédéral %sc(EventClass_Federation)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Empire,\", Rang Empérial %sc(EventClass_Empire)\")"
Static say_PowerplayCollect $= Collecte de produits de jeu de puissance pour la livraison à %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) éléments
Static say_PowerplayDefect $= Défection de %(EventClass_FromPower) à %(EventClass_ToPower)
Static say_PowerplayDeliver $= Livraison de produits de jeu de puissance à %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) éléments
Static say_PowerplayFastTrack $= Paiement accéléré à %(EventClass_Power), coût de %(EventClass_Cost) crédits
Static say_PowerplayJoin $= Vous avez rejoint %(EventClass_Power), bonne chance commandant
Static say_PowerplayLeave $= Vous quittez %(EventClass_Power)
Static say_PowerplaySalary $= Salaire de jeu de puissance d'un montant de %(EventClass_Amount) crédits réçu de %(EventClass_Power) 
Static say_PowerplayVote $= Vote pour que %(EventClass_Power) prenne le controle du système stellaire %star(EventClass_System,say_ss), les votes sont %(EventClass_Votes)
Static say_PowerplayVoucher $= "Récompence pour combat de jeu de puissance de %(EventClass_Power) dans les systèmes %expandarray(EventClass_Systems,\", \",0,20,splitcaps)"
Static say_PVPKill $= Le Commandant %(EventClass_Victim) de rang %(EventClass_CombatRank) a été éliminé

Static say_RebootRepair $= "Réparation et rédémarrage des modules %expandarray(EventClass_FriendlySlots,\", \",0,20,splitcaps)"
Static say_RedeemVoucher $= "Récupération de %(EventClass_Type) d'un montnant de %hnum(EventClass_Amount,HNumList) crédits, %ifnotempty(EventClass_Faction,\" de la faction %sc(EventClass_Faction)\")%ifnonzero(EventClass_BrokerPercentage,\", avec une commission de %(EventClass_BrokerPercentage) pourcent pour le courtier\")"

Static say_Repair $= {%(EventClass_ItemLocalised) réparé} pour %hnum(EventClass_Cost,HNumList) crédits
Static say_RepairDrone $= Le drone a réparé %round(EventClass_HullRepaired,1,0.#) de la coque, %round(EventClass_CockpitRepaired,1,0.#) du cockpit, %round(EventClass_CorrosionRepaired,1,0.#) de la corrosion

Static say_RepairAll $= Vaisseau réparé à 100 pourcent au prix de %hnum(EventClass_Cost,HNumList) crédits
Static say_RefuelAll $= Ravitaillement complet en carburant effectué au prix de %(EventClass_Cost) crédits, %round(EventClass_Amount,1,0.0) tonnes de carburant ajoutées
Static say_RefuelPartial $= Ravitaillement partiel en carburant effectué au prix de %(EventClass_Cost) crédits, %round(EventClass_Amount,1,0.0) tonnes de carburant ajoutées
Static say_RestockVehicle $= Achat de %(EventClass_Count) %(EventClass_Type) de type %(EventClass_Loadout) aux prix de %(EventClass_Cost) crédits
Static say_Resurrect $= Bon retour parmis les vivant, Command, au prix de %hnum(EventClass_Cost,HNumList) crédits
Static say_ReceiveText $= Message reçu de %(EventClass_FromLocalised), %(EventClass_MessageLocalised)

Static say_SAAScanComplete $= Analyse de la surface de %body(EventClass_BodyName,EventStarSystem,say_ss) terminée Commandant, %(EventClass_ProbesUsed) sondes utilisées

Static say_SellExplorationData $= Vente de %(EventClass_Systems_Length) données de systèmes stellaire pour %hnum(EventClass_BaseValue,HNumList) crédits.
Static say_SellExplorationDataBonus $= Et découverte de %(EventClass_Discovered_Length) corps celeste pour un bonus de %hnum(EventClass_Bonus,HNumList) crédits

Static say_MultiSellExplorationData $= Vente de %(EventClass_Systems_Length) données de systèmes stellaire pour %hnum(EventClass_TotalEarnings,HNumList) crédits.

Static say_SellShipOnRebuy $= Sold %(EventClass_ShipType) type ship for %hnum(EventClass_ShipPrice,HNumList) crédits to fund rebuy of current ship
Static say_SendText $= Message envoyé à %(EventClass_To_Localised)

Static say_Scanned $= Scan de %(EventClass_ScanType) détecté

// always said on star
Static say_ScanStar $= "Étoile %Body(EventClass_BodyName,EventStarSystem,say_ss) scannée, %(EventClass_StarTypeText)%ifgt(EventClass_EstimatedValue,19999,\", %hnum(EventClass_EstimatedValue,HNumList) crédits\")"
// gated on ScanStarMassDisable
Static say_ScanStarMassMag $= , %roundnz(EventClass_nStellarMass,1,0.#,4) sol
Static say_ScanStarMassMag $+= , Magnitude absolue de %round(EventClass_nAbsoluteMagnitude,1,M0.#)
Static say_ScanStarInOrbit $= , période orbitale de %round(period,1,0.#) jours
Static say_ScanStarRadius $= , rayon de %roundnz(radius,2,0.#,4) sol
// gated on ScanHabZoneEnable
Static say_ScanStarHabitableZone $= , zone habitable de %round(EventClass_HabitableZoneInner,0,0) à %round(EventClass_HabitableZoneOuter,0,0) secondes lumière
Static say_ScanStarAge $= , agée de %hnum(%eval('%(EventClass_nAge)*1000000.0'),HNumList) années

// always said on planet
Static say_ScanPlanet $= "Planète %Body(EventClass_BodyName,EventStarSystem,say_ss) scannée, %ifnotempty(EventClass_TerraformState,\",%sc(EventClass_TerraformState)\")%ifnotempty(EventClass_PlanetClass,\", %rs(EventClass_PlanetClass,say_ss)\")"
// gated on ScanPlanetBasicInformationDisable
Static say_ScanPlanetCredits $= "%ifgt(EventClass_EstimatedValue,19999,\", %hnum(EventClass_EstimatedValue,HNumList) crédits\")"
Static say_ScanPlanetDistance $= , Distance de %hnum(EventClass_DistanceFromArrivalLS,HNumList) secondes lumière
Static say_ScanPlanetLandable $= , Atterrissable
Static say_ScanPlanetAtmosphere $= , %sc(EventClass_Atmosphere) %ifnotcontains(EventClass_Atmosphere, ' atmosphère','')
Static say_ScanPlanetNoAtmosphere $= , pas d'atmosphère
// gated on ScanPlanetExtendedInformationEnable
Static say_ScanPlanetVolcanism $= , %(EventClass_Volcanism)
Static say_ScanPlanetTidallyLocked $= , rotation synchrone
Static say_ScanPlanetRotation $= , période de rotation de %round(rotation,1,0.#) jours
Static say_ScanPlanetOrbitalPeriod $= , période orbitale de %round(period,1,0.#) days
Static say_ScanPlanetMass $= , masse de %round(EventClass_nMassEM,3,0.###) Terre
Static say_ScanPlanetMoonMass $= , masse de %roundnz(moonmass,2,0.##,4) Lune
Static say_ScanPlanetRadius $= , rayon de %round(radius,0,0.#) km
Static say_ScanPlanetGravity $= , gravié de %roundnz(gravity,1,0.#,4) gé
Static say_ScanPlanetTemperature $= , température de %round(EventClass_nSurfaceTemperature,0,0.#) kelvin
Static say_ScanPlanetPressure $= , pression de %roundnz(EventClass_nSurfacePressure,1,0.#,4) pascal
Static say_ScanPlanetNoSurfacePressure $= , pas de pression de surface
// gated on ScanPlanetMaterialInformationEnable
Static say_ScanPlanetMaterials $= ", matériaux détectés %ExpandVars(EventClass_Materials_,\", \",0,1000,\"nameonly splitcaps\")"

// If Nav sequence is in operation, gated on SpeechNavBeacon being Summary
Static say_ScanNav $= %(navbeaconstarcount) étoiles et %(navbeaconplanetcount) autres corps. %(navbeaconextra)
Static say_ScanNavPlanetEarthlike $= "%(EventClass_BodyName) est de type Terre, "
Static say_ScanNavPlanetAmmonia $= "%(EventClass_BodyName) est un monde océan, "
Static say_ScanNavPlanetWaterWorld $= "%(EventClass_BodyName) est un monde d'ammoniaqie, "
Static say_ScanNavStarBlackHole $= "%(EventClass_BodyName) est un trou noire, "
Static say_ScanNavStarNeutron $= %(EventClass_BodyName) est une étoile à neutron,

Static say_Screenshot $= Capture d'écran du corps %body(EventClass_Body,EventStarSystem,say_ss)
Static say_ScientificResearch $= Contribution à la recherche scientifique %sc(EventClass_Name) de %(EventClass_Count) éléments dans la catégorie %sc(EventClass_Category)

Static say_SearchAndRescue $= Delivered %(EventClass_Count) %(EventClass_FriendlyName) to search and rescue contact. Reward is %(EventClass_Reward) crédits
Static say_SellDrones $= Sold %(EventClass_Count) %(EventClass_Type) for %(EventClass_TotalSale) crédits
Static say_SelfDestruct $= Preparing for launch of escape capsule Commandant, vehicle self destructing

Static say_SharedBookmarkToSquadron $= Bookmark shared with Squadron %(EventClass_Name)

Static say_ShipTargeted1 $+= Pilot is %(EventClass_PilotName_Localised), %(EventClass_PilotRank), in a %ship(EventClass_Ship_Localised)
Static say_ShipTargeted2 $+= Shield %round(EventClass_ShieldHealth,1,0.#) per cent, Hull at %round(EventClass_HullHealth,1,0.#) per cent
Static say_ShipTargeted3 $+= "%ifeq(levelscanned,0,\"Targetted %(EventClass_PilotName_Localised), \")"
Static say_ShipTargeted3 $+= %ifnotequal(EventClass_LegalStatus,'Lawless','Ship is %(EventClass_LegalStatus)')%ifnotempty(EventClass_Bounty,', Bounty %hnum(EventClass_Bounty,HNumList) crédits') %ifnotempty(EventClass_Faction,', Faction %(EventClass_Faction)')

Static say_SRVDestroyed $= {Boom;Blast;Kerpow} Your SRV is destroyed. Returning to Mothership
Static say_SystemsShutdown $= {Alert, ;Danger, ;Be prepared, }{Enemy vessel;Other ship} has disabled the ship

Static say_ShipyardBuy $= Bought ship %ship(EventClass_ShipType) at %hnum(EventClass_ShipPrice,HNumList) crédits
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_StoreOldShip,\", Stored ship %ship(EventClass_StoreOldShip) in hangar\")"
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_SellOldShip,\", Sold ship %ship(EventClass_SellOldShip) for %(EventClass_SellPrice) crédits\")"
Static say_ShipyardSell $= "Sold ship %ship(EventClass_ShipType) for %hnum(EventClass_ShipPrice,HNumList) crédits%ifnotempty(EventClass_System, \" at system %star(EventClass_System,say_ss)\")"
Static say_ShipyardNew $= {Congratulations on }{buying a brand new;your new purchase of a} %ship(EventClass_ShipType) ship
Static say_ShipyardSwap $= Swapped ship %ship(EventClass_StoreOldShip) for a %ship(EventClass_ShipType)
Static say_ShipyardTransfer $= Ordered the transfer of ship %ship(EventClass_ShipType) from system %star(EventClass_FromSystem,say_ss) at %round(EventClass_Distance,1,0.0) light years, cost will be %(EventClass_TransferPrice) crédits

Static say_SupercruiseEntry $= Warp engines on;Supercruise engaged;Frame shift drive engaged;Hold on tight, Supercruising
Static say_SupercruiseExit $= {Exiting supercruise;Normal space Commandant;Warp engines off, Impulse engaged}
Static say_SupercruiseExit $+= "%ifnotempty(EventClass_BodyType,\", Arrived at %(EventClass_BodyType)\") %ifnotempty(EventClass_Body,\" %body(EventClass_Body,EventStarSystem,say_ss)\")"

Static say_shieldsdown $= Alert shields are down, evasive manoeuvres;Shields are down;Danger no shields, run;Don't Panic, but we have no shields!
Static say_shieldsup $= Shields restored;Shields back on line Commandant;Shields operational, Commandant

Static say_SetUserShipName $= I name this ship of type %ship(EventClass_Ship), and call it %(EventClass_ShipName) with registration %(EventClass_ShipIdent).  May god bless all who sail the stars in her!

Static say_StartJump $= "%ifcontains(EventClass_JumpType,\"Hyperspace\",\"%expand(say_StartHyperspace)\",\"%expand(say_StartSupercruise)\")"
Static say_StartHyperspace $= "{Prepare for Hyperspace;Jumping;Entering Hyperspace;Warping}{ to system %star(EventClass_StarSystem,say_ss), %(EventClass_FriendlyStarClass), %ifcontains(\"O B A F G K M\",EventClass_StarClass,\"Scoopable\",\"Non Scoopable\"),}{.;. Hold on tight!;. In warp;. Make it So!;. in hyperspace}{%ifcontains(EventClass_FriendlyStarClass,'Black Hole','. Warning star is Dangerous, throttle down now')}{%ifcontains(EventClass_FriendlyStarClass,'Neutron','. Warning star is Dangerous, throttle down now')}{%ifcontains(EventClass_FriendlyStarClass,'White Dwarf','. Warning star is Dangerous, throttle down now')}"
Static say_StartSupercruise $= Entering supercruise;Prepare for supercruise

Static say_Synthesis $= Synthesis of %sc(EventClass_Name) performed

Static say_SquadronCreated $= Created new Squadron %(EventClass_Name);Created %(EventClass_Name) Squadron
Static say_SquadronDemotion $= {You've must have been Naughty!;oh Dear;Oh no!}, You've been demoted by your Squadron %(EventClass_Name) to Rank %(EventClass_NewRank)
Static say_SquadronPromotion $= {Well Done;Congratulations;Bravo!} You've been promoted by your Squadron %(EventClass_Name) to Rank %(EventClass_NewRank)

Static say_Touchdown $= %iftrue(EventClass_PlayerControlled,'{Landing successful Commandant;Landed Commandant;Touchdown!}{ at Lattitude %round(EventClass_Latitude,2,M0.##), Longitude %round(EventClass_Longitude,2,M0.##), }Well done Commandant;Engines off;Prepare for surface operations','Ship returned from orbit and is ready to board;Ship landed, ready to board')
Static say_TechnologyBroker $= "Technology Broker has unlocked item %expandarray(EventClass_ItemsUnlocked,\", \",0,9,\"\",\"_Name_Localised\")"

Static say_Undocked $= Undocked from %sc(EventClass_StationName) fly safe Commandant;Ship ready, your in control Commandant; Engines on, departing %sc(EventClass_StationName);Departing station %sc(EventClass_StationName)
Static say_USSDrop $= Dropped into U S S type %(EventClass_USSTypeLocalised), threat level is %(EventClass_USSThreat)

Static say_VehicleSwitch $= Switching to %sc(EventClass_To)

Static say_WingAdd $= Commandant %sc(EventClass_Name) has joined the wing
Static say_WingJoin $= "Joined wing with Commandant %expandarray(EventClass_Others,\", Commandant \", 0, 32)"
Static say_WingLeave $= Leaving wing Commandant
Static say_WingInvite $= Invited to wing by %(EventClass_Name)

Static say_WonATrophyForSquadron $= Congratulations, you've won a trophy for Squadron %(EventClass_Name)
// other stuff

Static say_EDSM $= First discovery of %replace(EventStarList,';',',')
Static say_EGO $= Elite Galaxy Online new record due to %replace(EventStarList,';',',')

Rem subsitution patterns (ss1,ss2 etc) for faction and body name fields
Static say_ssn0 $= "-; tiret "
Static say_ssn1 $= " I ; 1 "
Static say_ssn2 $= " II ; 2 "
Static say_ssn3 $= " III ; 3 "
Static say_ssn4 $= "q\" IV ; 4 \""
Static say_ssn5 $= " V ; 5 "

Rem say subsitution patterns, applied after the phrase has been made, are called say_txN in the same form as above.

Static say_tx1 $= terraforming; Terra Formation
Static say_tx2 $= terraformable; Terra Formable
Static say_tx3 $= "CMDR ;Commandant "
Static say_tx4 $= " Cr ; Crédits "
Static say_tx5 $= "Mk. ;Mark "

// Phonemes

If SpeechControls NotPresent Or SpeechControls NotContains SSMLDisable;

    // From EDDI
    Static say_tx_power1 = Archon Delaine;<phoneme alphabet='ipa' ph='ˈɑːkɒn'>Archon</phoneme> <phoneme alphabet='ipa' ph='dəˈleɪn'>Delaine</phoneme>
    Static say_tx_power2 = Aisling Duval;<phoneme alphabet='ipa' ph='ˈæʃlɪŋ'>Aisling</phoneme> <phoneme alphabet='ipa' ph='duːˈvæl'>Duval</phoneme>
    Static say_tx_power3 = Arissa Lavigny-Duval;<phoneme alphabet='ipa' ph='əˈrɪsə'>Arissa</phoneme> <phoneme alphabet='ipa' ph='ləˈviːniː'>Lavigny</phoneme> <phoneme alphabet='ipa' ph='duːˈvæl'>Duval</phoneme>
    Static say_tx_power4 = Denton Patreus;<phoneme alphabet='ipa' ph='ˈdɛntən'>Denton</phoneme> <phoneme alphabet='ipa' ph='pətˈreɪəs'>Patreus</phoneme>
    Static say_tx_power5 = Edmund Mahon;<phoneme alphabet='ipa' ph='ˈɛdmənd'>Edmund</phoneme> <phoneme alphabet='ipa' ph='ˈmɑːn'>Mahon</phoneme>
    Static say_tx_power6 = Felicia Winters;<phoneme alphabet='ipa' ph='fəˈlɪʃɪə'>Felicia</phoneme> <phoneme alphabet='ipa' ph='ˈwɪntəs'>Winters</phoneme>
    Static say_tx_power7 = Pranav Antal;<phoneme alphabet='ipa' ph='pɜːnʌv'>Pranav</phoneme> <phoneme alphabet='ipa' ph='ˌænˈtæl'>Antal</phoneme>
    Static say_tx_power8 = Zachary Hudson;<phoneme alphabet='ipa' ph='ˈzækərɪ'>Zachary</phoneme> <phoneme alphabet='ipa' ph='ˈhʌdsən'>Hudson</phoneme>
    Static say_tx_power9 = Zemina Torval;<phoneme alphabet='ipa' ph='zəˈmiːnə'>Zemina</phoneme> <phoneme alphabet='ipa' ph='tɔːˈvæl'>Torval</phoneme>
    Static say_tx_power10 = Li Yong-Rui;<phoneme alphabet='ipa' ph='liː'>Li</phoneme> <phoneme alphabet='ipa' ph='ˈjɒŋ'>Yong</phoneme> <phoneme alphabet='ipa' ph='reɪ'>Rui</phoneme>
    Static say_tx_power11 = Yuri Grom;<phoneme alphabet='ipa' ph='jʊəˈriː'>Yuri</phoneme> <phoneme alphabet='ipa' ph='ˈɡrɒm'>Grom</phoneme>

    Rem bad phonemes say_tx_star54 = r;\b(Taygeta)\b;<phoneme alphabet='ipa' ph = 'teɪˈɪdtə'>Taygeta</phoneme>
    Rem say_tx_star14 = r;\b(Celaeno)\b;<phoneme alphabet='ipa' ph = 'sᵻˈliːnoʊ'>Celaeno</phoneme>

    Static say_tx_star1 = r;\b(Achenar)\b;<phoneme alphabet='ipa' ph = 'ˈakɜːnɑ'>Achenar</phoneme>
    Static say_tx_star2 = r;\b(Acihault)\b;<phoneme alphabet='ipa' ph = 'əˈsɪhɔːt'>Acihault</phoneme>
    Static say_tx_star3 = r;\b(Adan)\b;<phoneme alphabet='ipa' ph = 'ˈædən'>Adan</phoneme>
    Static say_tx_star4 = r;\b(Alcyone)\b;<phoneme alphabet='ipa' ph = 'ælˈsaɪəniː'>Alcyone</phoneme>
    Static say_tx_star5 = r;\b(Aldebaran)\b;<phoneme alphabet='ipa' ph = 'alˈdɛbəɹən'>Aldebaran</phoneme>
    Static say_tx_star6 = r;\b(Anemoi)\b;<phoneme alphabet='ipa' ph = 'æˈniːmɔɪ'>Anemoi</phoneme>
    Static say_tx_star7 = r;\b(Apoyota)\b;<phoneme alphabet='ipa' ph = 'æˈpɔɪəʊtə'>Apoyota</phoneme>
    Static say_tx_star8 = r;\b(Arque)\b;<phoneme alphabet='ipa' ph = 'ɑːrk'>Arque</phoneme>
    Static say_tx_star9 = r;\b(Asterope)\b;<phoneme alphabet='ipa' ph = 'əˈstɛroʊpiː'>Asterope</phoneme>
    Static say_tx_star10 = r;\b(Atlas)\b;<phoneme alphabet='ipa' ph = 'ˈætləs'>Atlas</phoneme>
    Static say_tx_star11 = r;\b(Aulin)\b;<phoneme alphabet='ipa' ph = 'ˈɔːlɪn'>Aulin</phoneme>
    Static say_tx_star12 = r;\b(Bunda)\b;<phoneme alphabet='ipa' ph = 'ˈbuːndə'>Bunda</phoneme>
    Static say_tx_star13 = r;\b(Cayutorme)\b;<phoneme alphabet='ipa' ph = 'ˈkaɪətɔːm'>Cayutorme</phoneme>
    Static say_tx_star15 = r;\b(Ceos)\b;<phoneme alphabet='ipa' ph = 'ˈkeɪɒs'>Ceos</phoneme>
    Static say_tx_star16 = r;\b(Cygnus)\b;<phoneme alphabet='ipa' ph = 'ˈsɪɡnəs'>Cygnus</phoneme>
    Static say_tx_star17 = r;\b(Deciat)\b;<phoneme alphabet='ipa' ph = 'ˈdɛsiːæt'>Deciat</phoneme>
    Static say_tx_star18 = r;\b(Diso )\b;<phoneme alphabet='ipa' ph = 'ˈdiːsəʊ'>Diso</phoneme>
    Static say_tx_star19 = r;\b(Djiwal)\b;<phoneme alphabet='ipa' ph = 'ˈdʒɪwæl'>Djiwal</phoneme>
    Static say_tx_star20 = r;\b(Dvorsi)\b;<phoneme alphabet='ipa' ph = 'ˈdvɔːsiː'>Dvorsi</phoneme>
    Static say_tx_star21 = r;\b(Electra)\b;<phoneme alphabet='ipa' ph = 'ɪˈlɛktrə'>Electra</phoneme>
    Static say_tx_star22 = r;\b(Eravate)\b;<phoneme alphabet='ipa' ph = 'ɛrəˈvɑːtˌeɪ'>Eravate</phoneme>
    Static say_tx_star23 = r;\b(Eranin)\b;<phoneme alphabet='ipa' ph = 'ˈɛrənin'>Eranin</phoneme>
    Static say_tx_star24 = r;\b(Frigaha)\b;<phoneme alphabet='ipa' ph = 'frɪɡˈɑːhɑːr'>Frigaha</phoneme>
    Static say_tx_star25 = r;\b(Grandmort)\b;<phoneme alphabet='ipa' ph = 'ˈɡʀɒdˌmɔʀ'>Grandmort</phoneme>
    Static say_tx_star26 = r;\b(Hecate)\b;<phoneme alphabet='ipa' ph = 'ˈhɛkətɪ'>Hecate</phoneme>
    Static say_tx_star27 = r;\b(Hotas)\b;<phoneme alphabet='ipa' ph = 'həʊtæs'>Hotas</phoneme>
    Static say_tx_star28 = r;\b(Isleta)\b;<phoneme alphabet='ipa' ph = 'aɪlˈetə'>Isleta</phoneme>
    Static say_tx_star29 = r;\b(i Bootis)\b;<phoneme alphabet='ipa' ph = 'aɪ'>i</phoneme><phoneme alphabet='ipa' ph = 'bəʊˈəʊtɪs'>Bootis</phoneme>
    Static say_tx_star30 = r;\b(Lave)\b;<phoneme alphabet='ipa' ph = 'leɪv'>Lave</phoneme>
    Static say_tx_star31 = r;\b(Kaia Bajaja)\b;<phoneme alphabet='ipa' ph = 'ˈkaɪə'>Kaia</phoneme><phoneme alphabet='ipa' ph = 'ˈbɑːhɑːhɑː'>Bajaja</phoneme>
    Static say_tx_star32 = r;\b(Kigana)\b;<phoneme alphabet='ipa' ph = 'kiːˈɡɑːnə'>Kigana</phoneme>
    Static say_tx_star33 = r;\b(Kini)\b;<phoneme alphabet='ipa' ph = 'ˈkiːniː'>Kini</phoneme>
    Static say_tx_star34 = r;\b(Kremainn)\b;<phoneme alphabet='ipa' ph = 'krəˈmeɪn'>Kremainn</phoneme>
    Static say_tx_star35 = r;\b(Laksak)\b;<phoneme alphabet='ipa' ph = 'ˈlæks.æk'>Laksak</phoneme>
    Static say_tx_star36 = r;\b(Leesti)\b;<phoneme alphabet='ipa' ph = 'ˈliːstiː'>Leesti</phoneme>
    Static say_tx_star37 = r;\b(Leucos)\b;<phoneme alphabet='ipa' ph = 'ˈluːkɒs'>Leucos</phoneme>
    Static say_tx_star38 = r;\b(Luyten's Star)\b;<phoneme alphabet='ipa' ph = 'ˈlaʊ.təns'>Luyten's</phoneme><phoneme alphabet='ipa' ph = 'stɑː'>Star</phoneme>
    Static say_tx_star39 = r;\b(Maia)\b;<phoneme alphabet='ipa' ph = 'ˈmaɪ.ə'>Maia</phoneme>
    Static say_tx_star40 = r;\b(Mata)\b;<phoneme alphabet='ipa' ph = 'ˈmɑː.tʌ'>Mata</phoneme>
    Static say_tx_star41 = r;\b(Merope)\b;<phoneme alphabet='ipa' ph = 'ˈmɛrəpiː'>Merope</phoneme>
    Static say_tx_star42 = r;\b(Mu Koji)\b;<phoneme alphabet='ipa' ph = 'mjuː'>Mu</phoneme><phoneme alphabet='ipa' ph = 'ˈkəʊdʒiː'>Koji</phoneme>
    Static say_tx_star43 = r;\b(Nuenets)\b;<phoneme alphabet='ipa' ph = 'ˈnjuːənɛts'>Nuenets</phoneme>
    Static say_tx_star44 = r;\b(Okinura)\b;<phoneme alphabet='ipa' ph = 'ɒkɪˈnjʊrə'>Okinura</phoneme>
    Static say_tx_star45 = r;\b(Orrere)\b;<phoneme alphabet='ipa' ph = 'ɒrˈɪər'>Orrere</phoneme>
    Static say_tx_star46 = r;\b(Pai Szu)\b;<phoneme alphabet='ipa' ph = 'paɪ'>Pai</phoneme><phoneme alphabet='ipa' ph = 'ʃuː'>Szu</phoneme>
    Static say_tx_star47 = r;\b(Pleione)\b;<phoneme alphabet='ipa' ph = 'ˈplaɪəniː'>Pleione</phoneme>
    Static say_tx_star48 = r;\b(Procyon)\b;<phoneme alphabet='ipa' ph = 'ˈprəʊˌsɪən'>Procyon</phoneme>
    Static say_tx_star49 = r;\b(Potriti)\b;<phoneme alphabet='ipa' ph = 'pəˈtriːtɪ'>Potriti</phoneme>
    Static say_tx_star50 = r;\b(Reorte)\b;<phoneme alphabet='ipa' ph = 'ˌriːˈɔːt'>Reorte</phoneme>
    Static say_tx_star51 = r;\b(Sakti)\b;<phoneme alphabet='ipa' ph = 'ˈsæk.tiː'>Sakti</phoneme>
    Static say_tx_star52 = r;\b(Shinrarta Dezhra)\b;<phoneme alphabet='ipa' ph = 'ʃɪnˈrɑːrtə'>Shinrarta</phoneme><phoneme alphabet='ipa' ph = 'ˈdezɦrə'>Dezhra</phoneme>
    Static say_tx_star53 = r;\b(Surya)\b;<phoneme alphabet='ipa' ph = 'ˈsuːˈrɪːˈɛr'>Surya</phoneme>
    Static say_tx_star55 = r;\b(Tse)\b;<phoneme alphabet='ipa' ph = 'ʃjɛ'>Tse</phoneme>
    Static say_tx_star56 = r;\b(Xihe)\b;<phoneme alphabet='ipa' ph = 'ʃiː.hər'>Xihe</phoneme>
    Static say_tx_star57 = r;\b(Xinca)\b;<phoneme alphabet='ipa' ph = 'ˈʃɛnkə'>Xinca</phoneme>
    Static say_tx_star58 = r;\b(Yakabugai)\b;<phoneme alphabet='ipa' ph = 'ˈjækəbuːɡaɪ'>Yakabugai</phoneme>
    Static say_tx_star59 = r;\b(Zaonce)\b;<phoneme alphabet='ipa' ph = 'ˈzeɪɒns'>Zaonce</phoneme>
    Static say_tx_star60 = r;\b(Zhang Fei)\b;<phoneme alphabet='ipa' ph = 'ʈʂáŋ'>Zhang</phoneme><phoneme alphabet='ipa' ph = 'feɪ'>Fei</phoneme>

    Static say_tx_constellation1 = r;\b(Alrai)\b;<phoneme alphabet='ipa' ph = 'ˈalraɪ'>Alrai</phoneme>
    Static say_tx_constellation2 = r;\b(Antliae)\b;<phoneme alphabet='ipa' ph = 'ˈæntlɪˌiː'>Antliae</phoneme>
    Static say_tx_constellation3 = r;\b(Aquarii)\b;<phoneme alphabet='ipa' ph = 'əˈkwɛərɪˌaɪ'>Aquarii</phoneme>
    Static say_tx_constellation4 = r;\b(Arietis)\b;<phoneme alphabet='ipa' ph = 'əˈraɪɪtɪs'>Arietis</phoneme>
    Static say_tx_constellation5 = r;\b(Bei Dou)\b;<phoneme alphabet='ipa' ph = 'beɪ'>Bei</phoneme><phoneme alphabet='ipa' ph = 'ˈduː'>Dou</phoneme>
    Static say_tx_constellation6 = r;\b(Blanco)\b;<phoneme alphabet='ipa' ph = 'blæŋkˌəʊ'>Blanco</phoneme>
    Static say_tx_constellation7 = r;\b(Bleae Thaa)\b;<phoneme alphabet='ipa' ph = 'bliːiː'>Bleae</phoneme><phoneme alphabet='ipa' ph = 'θɑː'>Thaa</phoneme>
    Static say_tx_constellation8 = r;\b(Bleae Thua)\b;<phoneme alphabet='ipa' ph = 'bliːiː'>Bleae</phoneme><phoneme alphabet='ipa' ph = 'θuːə'>Thua</phoneme>
    Static say_tx_constellation9 = r;\b(Capricorni)\b;<phoneme alphabet='ipa' ph = 'ˌkæprɪˈkɔːnaɪ'>Capricorni</phoneme>
    Static say_tx_constellation10 = r;\b(Cepheus)\b;<phoneme alphabet='ipa' ph = 'ˈsiːfjuːs'>Cepheus</phoneme>
    Static say_tx_constellation11 = r;\b(Cephei)\b;<phoneme alphabet='ipa' ph = 'ˈsiːfɪˌaɪ'>Cephei</phoneme>
    Static say_tx_constellation12 = r;\b(Ceti)\b;<phoneme alphabet='ipa' ph = 'ˈsiːtaɪ'>Ceti</phoneme>
    Static say_tx_constellation13 = r;\b(Chi)\b;<phoneme alphabet='ipa' ph = 'kaɪ'>Chi</phoneme>
    Static say_tx_constellation14 = r;\b(Crucis)\b;<phoneme alphabet='ipa' ph = 'ˈkruːsɪs'>Crucis</phoneme>
    Static say_tx_constellation15 = r;\b(Cygni)\b;<phoneme alphabet='ipa' ph = 'ˈsɪɡnaɪ'>Cygni</phoneme>
    Static say_tx_constellation16 = r;\b(Eta Carina)\b;<phoneme alphabet='ipa' ph = 'ˈiːtə'>Eta</phoneme><phoneme alphabet='ipa' ph = 'kəˈriːnə'>Carina</phoneme>
    Static say_tx_constellation17 = r;\b(Fornacis)\b;<phoneme alphabet='ipa' ph = 'fɔːˈneɪsɪs'>Fornacis</phoneme>
    Static say_tx_constellation18 = r;\b(Herculis)\b;<phoneme alphabet='ipa' ph = 'hɜːkjʊˈlɪs'>Herculis</phoneme>
    Static say_tx_constellation19 = r;\b(Hyades)\b;<phoneme alphabet='ipa' ph = 'ˈhaɪəˌdiːz'>Hyades</phoneme>
    Static say_tx_constellation20 = r;\b(Hydrae)\b;<phoneme alphabet='ipa' ph = 'ˈhaɪdriː'>Hydrae</phoneme>
    Static say_tx_constellation21 = r;\b(Lupus)\b;<phoneme alphabet='ipa' ph = 'ˈluːpəs'>Lupus</phoneme>
    Static say_tx_constellation22 = r;\b(Lyncis)\b;<phoneme alphabet='ipa' ph = 'ˈlɪnsɪs'>Lyncis</phoneme>
    Static say_tx_constellation23 = r;\b(Omega)\b;<phoneme alphabet='ipa' ph = 'ˈəʊmɪɡə'>Omega</phoneme>
    Static say_tx_constellation24 = r;\b(Ophiuchus)\b;<phoneme alphabet='ipa' ph = 'ɒˈfjuːkəs'>Ophiuchus</phoneme>
    Static say_tx_constellation25 = r;\b(Pegasi)\b;<phoneme alphabet='ipa' ph = 'ˈpɛɡəˌsaɪ'>Pegasi</phoneme>
    Static say_tx_constellation26 = r;\b(Persei)\b;<phoneme alphabet='ipa' ph = 'ˈpɜːsɪˌaɪ'>Persei</phoneme>
    Static say_tx_constellation27 = r;\b(Piscium)\b;<phoneme alphabet='ipa' ph = 'ˈpaɪsɪəm'>Piscium</phoneme>
    Static say_tx_constellation28 = r;\b(Pleiades)\b;<phoneme alphabet='ipa' ph = 'ˈplaɪədiːz'>Pleiades</phoneme>
    Static say_tx_constellation29 = r;\b(Puppis)\b;<phoneme alphabet='ipa' ph = 'ˈpʌpɪs'>Puppis</phoneme>
    Static say_tx_constellation30 = r;\b(Pru Euq)\b;<phoneme alphabet='ipa' ph = 'pruː'>Pru</phoneme><phoneme alphabet='ipa' ph = 'juːk'>Euq</phoneme>
    Static say_tx_constellation31 = r;\b(Rho Ophiuchi)\b;<phoneme alphabet='ipa' ph = 'rəʊ'>Rho</phoneme><phoneme alphabet='ipa' ph = 'ɒˈfjuːkaɪ'>Ophiuchi</phoneme>
    Static say_tx_constellation32 = r;\b(Sagittarius)\b;<phoneme alphabet='ipa' ph = 'ˌsædʒˈtɛəriəs'>Sagittarius</phoneme>
    Static say_tx_constellation33 = r;\b(Scorpii)\b;<phoneme alphabet='ipa' ph = 'ˈskɔːpɪˌaɪ'>Scorpii</phoneme>
    Static say_tx_constellation34 = r;\b(Shui Wei)\b;<phoneme alphabet='ipa' ph = 'ˈʃuːi'>Shui</phoneme><phoneme alphabet='ipa' ph = 'weɪ'>Wei</phoneme>
    Static say_tx_constellation35 = r;\b(Tau Ceti)\b;<phoneme alphabet='ipa' ph = 'taʊ'>Tau</phoneme><phoneme alphabet='ipa' ph = 'ˈsiːtaɪ'>Ceti</phoneme>
    Static say_tx_constellation36 = r;\b(Tascheter)\b;<phoneme alphabet='ipa' ph = 'ˈtɑːʃətɜː'>Tascheter</phoneme>
    Static say_tx_constellation37 = r;\b(Trianguli)\b;<phoneme alphabet='ipa' ph = 'traɪˈæŋˌɡjʊˌlaɪ'>Trianguli</phoneme>
    Static say_tx_constellation38 = r;\b(Trifid)\b;<phoneme alphabet='ipa' ph = 'ˈtraɪfɪd'>Trifid</phoneme>
    Static say_tx_constellation39 = r;\b(Tucanae)\b;<phoneme alphabet='ipa' ph = 'tuːˈkɑːniː'>Tucanae</phoneme>
    Static say_tx_constellation40 = r;\b(Wredguia)\b;<phoneme alphabet='ipa' ph = 'ˈredɡaɪə'>Wredguia</phoneme>

// Set speech = "Welcome to Tucanae"
// rem  Set speech = "%replacevar(speech,\"say_tx\")"
// Set speech = %replacevar(speech,"say_tx")
// print %(speech)

Static HNumList = Moins;Billion;Milliard;Million;Millier;Cent

Global SpeechDefinitionFile = SetUpLanguageEnglish
Static SpeechCulture = fr-fr

If SpeechControls NotPresent
    Print ****
    Print Setting voice pack control to default values, use the Add-On menu Voice Pack Configuration to reconfigure
    Print ****
    PersistentGlobal SpeechControls = NPCVoicesEnable;FirstJumpOnly;FSDFactionDisable;ScanHabZoneEnable;EDSMSummaryEnable;EDSMMoonsEnable;EDSMSubMoonsEnable;EDSMAtmosphereEnable;EDSMVolcanismEnable;NPCTextsEnable

If NPCVoiceNames NotPresent
    Perform voicenames                                          // we set this up to static since the user has not selected them explicitly.. when they do its a PerisistentGlobal
    Static NPCVoiceNames = %(VoiceNames)
    Rem Print Temp init of %(NPCVoiceNames)

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Rem Print VP %(ActionPackName) %(ActionPackFilePath)

Call SetUpLanguage

Set speech = %(say_welcome)

If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
    Call speak(speech="%(speech)")

Print Voice Pack installed, running on EDD Version %version(1).%version(2).%version(3).%version(4)
Call Initialise

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains VoicePack
    Call SetUpLanguage
    Say %(say_install)
Call Initialise

END PROGRAM

//*************************************************************
// Initialise
//*************************************************************
PROGRAM Initialise

MenuItem VoiceMenuConfigureVoice,add-ons,"Voice Synthesis Configuration",speaker
MenuItem VoiceMenuConfigureVerbosity,add-ons,"Voice Pack Configuration",speaker
MenuItem VoiceMenuConfigureNPCVoices,add-ons,"NPC Voice Select",speaker
MenuItem VoiceMenuConfigureSpeechFile,add-ons,"Edit speech file",missioncompleted
MenuItem VoiceMenuShowHelp,help,"Voice Pack",speaker

END PROGRAM

//*************************************************************
// SetUpLanguage
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageEnglish

END PROGRAM

//*************************************************************
// onShutdown
// Events: onShutdown
//*************************************************************
PROGRAM onShutdown

Set speech = "%phrase(\"%expand(say_shutdown)\")"
If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
    Call speak(speech="%(speech)",Wait=1)

END PROGRAM

//*************************************************************
// onRefreshEnd
// Events: onRefreshEnd
//*************************************************************
PROGRAM onRefreshEnd

If %(RefreshCount) <= 1
    Event PREFIX LAST_ LAST
    Ledger PREFIX LED_ AtOrBefore %(LAST_JID)
    Event PREFIX RK_ LAST Rank
    Set speech = "%phrase(\"%expand(say_refresh)\")"
    If SpeechControls IsPresent And SpeechControls NotContains WelcomeMessageDisable;
        Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ReceiveText
// Events: ReceiveText
//*************************************************************
PROGRAM ReceiveText

// •    Channel: (wing/local/voicechat/friend/player/npc/squadron/starsystem)

Let sayit = 0

If EventClass_Channel Contains Squadron
    Let sayit = "%IsPresent(SpeechControls,\"SquadronTextsEnable;\")"
Else If EventClass_Channel Contains Wing
    Let sayit = "%IsPresent(SpeechControls,\"WingTextsEnable;\")"
Else If EventClass_Channel Contains Local
    Let sayit = "%IsPresent(SpeechControls,\"LocalTextsEnable;\")"
Else If EventClass_Channel Contains Friend
    Let sayit = "%IsPresent(SpeechControls,\"FriendTextsEnable;\")"
Else If EventClass_Channel Contains Voice
    Let sayit = "%IsPresent(SpeechControls,\"VoiceChatTextsEnable;\")"
Else If EventClass_Channel Contains Star
    Let sayit = "%IsPresent(SpeechControls,\"StarSystemTextsEnable;\")"
Else If EventClass_Channel Contains Player
    Let sayit = "%IsPresent(SpeechControls,\"PlayerTextsEnable;\")"
Else If EventClass_Channel Contains NPC
    Let sayit = "!%IsPresent(SpeechControls,\"NPCChatterDisable;\")"
Else
    Let sayit = "%IsPresent(SpeechControls,\"AnyOtherTextsEnable;\")"

If sayit IsFalse
    Rem print not saying mate %(EventClass_Channel)
    Return

If EventClass_Channel $!= npc                                   // non NPC, is said by the main computer voice
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it
    Call speak(speech="%(speech)")
Else If SpeechControls NotContains NPCVoicesEnable;
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it
    Call speak(speech="%(speech)")
Else
    Set from = %(EventClass_FromLocalised)
    Set npcvar = "say_npc_%SafeVarName(\"%(from)_%(EventWhereAmI)\")"
    If "%exist(\"%(npcvar)\")" IsTrue
        Set voice = %indirect(npcvar)
        Set pitchshift = "%expand(\"%(npcvar)_pitch\")"
        Set rate = "%expand(\"%(npcvar)_rate\")"
    Else
        Let voicecount = %WordListCount(NPCVoiceNames)
        //print %(NPCVoiceNames) count %(voicecount)
        Let rnvoice = %Random(voicecount)
        Set voice = %WordListEntry(NPCVoiceNames,rnvoice)
        //print ..pick %(rnvoice) %(voice)

        If SpeechVoice IsPresent And voice $== %(SpeechVoice)
            If %Random(2) == 0
                Let pitchshift = 70+%Random(20)
            Else
                Let pitchshift = 107+%Random(10)
        Else
            Let pitchshift = 70+%Random(40)

        If pitchshift < 80
            Let rate = %Random(3)+1
        Else If pitchshift < 101
            Let rate = %Random(4)-1
        Else
            Let rate = %Random(4)-2
        Static %(npcvar) = %(voice)
        Static %(npcvar)_pitch = %(pitchshift)
        Static %(npcvar)_rate = %(rate)
        // Print for %(from) chose %(voice) at pitch %(pitchshift) rate %(rate)

    Set effectspath = %systempath(EDDSOUNDFOLDER)
    Set presound = %(effectspath)\\npcprefix.mp3
    Set postsound = %(effectspath)\\npcpostfix.mp3
    Set mixsound = %(effectspath)\\npcmix.mp3

    // print %(presound) %(postsound)
    If %fileexists(presound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set presound = ""
    If %fileexists(postsound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set postsound = ""
    If %fileexists(mixsound) IsFalse Or SpeechControls Contains NPCSoundsDisable
        Set mixsound = ""

    // print Result %(presound) %(postsound) %(mixsound)

    Set speech = %(EventClass_MessageLocalised)

    // we override the SoundEffects global by providing at least on speech effect, PitchShift
    Call speak(speech="%(speech)",Voice="%(voice)",PitchShift="%(pitchshift)",PrefixSound="%(presound)",PostfixSound="%(postsound)",MixSound="%(mixsound)",Rate="%(rate)",QueueLimit="5000")

END PROGRAM

//*************************************************************
// ShipTargeted
// Events: ShipTargeted
//*************************************************************
PROGRAM ShipTargeted

If SpeechControls NotPresent Or SpeechControls NotContains TargetReportingDisabled;
    If %(EventClass_TargetLocked) == 0
        Set v = say_ShipLostTarget
        Set speech = "%phrase(\"%indirect(v)\")"                // now expand any phrases in it
        Call speak(speech="%(speech)", QueueLimit="1000")
    Else If %(EventClass_ScanStage) >= 1
        // Pragma dumpvars TargetVars*
        // DeleteVariable TargetVars*                                      // remove any of these so we start afresh after each entry to a scene

        Set var = TargetVars_%(EventWhereAmI)_%(EventClass_PilotName_Localised)_%(EventClass_Ship)_%(EventClass_PilotRank)
        Set levelscanned = 0
        If "%exist(\"%(var)\")" IsTrue
            Set levelscanned = %indirect(var)

        Rem print Stage %(EventClass_ScanStage) %(var) ..Scanned to %(levelscanned) .. var %(var)

        If %(levelscanned) < %(EventClass_ScanStage)
            Set v = say_%(EventClass_EventTypeStr)%(EventClass_ScanStage)
            Static %(var) = %(EventClass_ScanStage)
            Set speech = "%phrase(\"%indirect(v)\")"            // now expand any phrases in it
            Call speak(speech="%(speech)", QueueLimit = "4000")
Else
    Rem print Off

END PROGRAM

//*************************************************************
// SupercruiseExit
// Events: SupercruiseExit
//*************************************************************
PROGRAM SupercruiseExit

Call GenericResponse(EventClass_*=Pass,Trigger*=Pass,EventStar*=Pass)
DeleteVariable TargetVars*                                      // remove any of these so we start afresh after each entry to a scene

END PROGRAM

//*************************************************************
// HullDamage
// Events: HullDamage
//*************************************************************
PROGRAM HullDamage

Let health100 = %(EventClass_Health)*100
Let health = %floor(health100,N0)
If health < 50
    Set speech = "%phrase(\"%expand(say_HullDamageCritical)\")"
    Call speak(speech="%(speech)", Volume=100)
Else
    Set speech = "%phrase(\"%expand(say_HullDamage)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ShieldState
// Events: ShieldState
//*************************************************************
PROGRAM ShieldState

If EventClass_ShieldsUp IsTrue
    Set speech = "%phrase(\"%expand(say_shieldsup)\")"
Else
    Set speech = "%phrase(\"%expand(say_shieldsdown)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommitCrime
// Events: CommitCrime
//*************************************************************
PROGRAM CommitCrime

If EventClass_Bounty IsNotEmpty
    Set speech = %expand(say_CommitCrimeBounty)
Else
    Set speech = %expand(say_CommitCrimeFine)

Set speech = "%phrase(\"%(speech)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommunityGoal
// Events: CommunityGoal
//*************************************************************
PROGRAM CommunityGoal

// Prevent repeats
If SpeechCGList NotPresent Or SpeechCGList $!= %(EventClass_CommunityGoalList)
    Static SpeechCGList = %(EventClass_CommunityGoalList)
    Call GenericResponse(EventClass_*=Pass,Trigger*=Pass)

END PROGRAM

//*************************************************************
// FSDResponse
// Events: FSDJump(QueueLimit=5000)
//*************************************************************
PROGRAM FSDResponse

Event FROM %(EventJID) INFO

// EVENT does not work during debugging using script.. so just set to 2
If EC_JID == 0
    Set EC_VisitCount = 2

Set visit = %expand(say_FSDJumpVisit)
Set visit = %wordof(visit, EC_VisitCount)

Set speech = %expand(say_FSDJump)
If EventClass_FuelLevel <= 4
    Set speech += "%phrase(\"%expand(say_FSDJumpFuelWarning)\")"

If SpeechControls NotPresent Or SpeechControls NotContains FuelLevelDisable;
    If EventClass_FuelUsed >= 0.1
        Set speech += "%phrase(\"%expand(say_FSDJumpFuel)\")"

If (EventClass_Faction IsNotEmpty) And (SpeechControls NotPresent Or SpeechControls NotContains FSDFactionDisable;)
    Set speech += "%phrase(\"%expand(say_FSDJumpFaction)\")"

If SpeechControls IsPresent And SpeechControls Contains FirstJumpOnly; And EC_VisitCount >= 2
    Call speak(speech="%(speech)", Priority=High)
Else
    Call speak(speech="%(speech)",FinishEvent=FSD, Priority=High)
    Static ScanSystem = %(EventStarSystem)

Static FSSAllBodiesFoundAllowed = 1	// allow FSSAllbodies found

END PROGRAM

//*************************************************************
// NavBeaconScan
// Events: NavBeaconScan
//*************************************************************
PROGRAM NavBeaconScan

Call GenericResponse(EventClass*=PASS,Trigger*=Pass)
Static navbeacontime = %TickCount()
Static navbeaconcounter = %(EventClass_NumBodies)
Static navbeaconstarcount = 0
Static navbeaconplanetcount = 0
Static navbeaconextra = ""

END PROGRAM

//*************************************************************
// Scan
// Events: Scan
//*************************************************************
PROGRAM Scan

Event FROM %(EventJID) INFO

// pragma dumpvars EventClass*

If navbeaconcounter IsPresent
    If navbeaconcounter > 0 And %eval(%TickCount()-%(navbeacontime)) < 30000
        StaticLet navbeaconcounter = %(navbeaconcounter)-1
        Rem print %(navbeaconcounter)
        Set sel = %ExistsDefault(SpeechNavBeacon,'Summary')
        If sel Contains "No Speech"
            End
        If sel Contains Summary
            If %(EventClass_IsStar) IsTrue
                Static navbeaconstarcount = %eval(%(navbeaconstarcount)+1)
                If %(EventClass_StarTypeID) $== H
                    Static navbeaconextra += %expand(say_ScanNavStarBlackHole)
                If %(EventClass_StarTypeID) $== N
                    Static navbeaconextra += %expand(say_ScanNavStarNeutron)
            Else
                Static navbeaconplanetcount = %eval(%(navbeaconplanetcount)+1)
                If %(EventClass_PlanetTypeID) Contains Earthlike_body
                    Static navbeaconextra += %expand(say_ScanNavPlanetEarthlike)
                If %(EventClass_PlanetTypeID) Contains Water_world
                    Static navbeaconextra += %expand(say_ScanNavPlanetWaterWorld)
                If %(EventClass_PlanetTypeID) Contains Ammonia_world
                    Static navbeaconextra += %expand(say_ScanNavPlanetAmmonia)

            If navbeaconcounter == 0
                Set speech = %expand(say_ScanNav)
                Call speak(speech="%(speech)")
            End

If %(EventClass_ScanType) $== AutoScan
    If SpeechControls NotPresent Or SpeechControls NotContains ScanAutoScanEnable;
        End

If %(EventClass_IsStar) IsTrue
    Set speech = %expand(say_ScanStar)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanStarMassDisable;
        Set speech += %expand(say_ScanStarMassMag)

        If EventClass_nOrbitalPeriod IsNotEmpty And EventClass_nOrbitalPeriod > 0
            Let period = %(EventClass_nOrbitalPeriod)/86400.0
            Set speech += %expand(say_ScanStarInOrbit)

        If EventClass_nRadius IsNotEmpty And EventClass_nRadius > 0
            Let radius = %(EventClass_nRadius)/695700000.0
            Set speech += %expand(say_ScanStarRadius)

    If SpeechControls IsPresent And SpeechControls Contains ScanHabZoneEnable;
        If EventClass_HabitableZoneInner IsNotEmpty And EventClass_HabitableZoneOuter IsNotEmpty And EventClass_HabitableZoneInner >= 5
            Set speech += %expand(say_ScanStarHabitableZone)
        If EventClass_nAge IsNotEmpty
            Set speech += %expand(say_ScanStarAge)

    Call speak(speech="%(speech)")
    End

Else
    If SpeechControls IsPresent And SpeechControls NotContains ScanPlanetBeltClusters; And EventClass_BodyName Contains "Belt Cluster"
        End                                                     // remove belt clusters

    Set speech = %expand(say_ScanPlanet)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetDistanceDisable;
        Set speech += %expand(say_ScanPlanetDistance)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetCreditsDisable;
        Set speech += %expand(say_ScanPlanetCredits)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetBasicInformationDisable;
        If EventClass_IsLandable IsNotEmpty
            If %(EventClass_IsLandable) IsTrue
                Set speech += %expand(say_ScanPlanetLandable)

        If %(EventClass_Atmosphere) IsNotEmpty And %(EventClass_Atmosphere) $!= None
            If %(EventClass_Atmosphere) $!= "Earth Like"        // ignore earth like atmos, we have already done it in the planet class
                Set speech += %expand(say_ScanPlanetAtmosphere)

        Else If EventClass_BodyName NotContains "Belt Cluster"
            Set speech += %expand(say_ScanPlanetNoAtmosphere)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetExtendedInformationEnable;
        If %(EventClass_Volcanism) IsNotEmpty
            Set speech += %expand(say_ScanPlanetVolcanism)

        If %(EventClass_nTidalLock) $== 1
            Set speech += %expand(say_ScanPlanetTidallyLocked)
        Else If EventClass_nRotationPeriod IsNotEmpty
            Let rotation = %(EventClass_nRotationPeriod)/86400.0
            Set speech += %expand(say_ScanPlanetRotation)

        If EventClass_nOrbitalPeriod IsNotEmpty
            Let period = %(EventClass_nOrbitalPeriod)/86400.0
            Set speech += %expand(say_ScanPlanetOrbitalPeriod)

        If EventClass_nMassEM IsNotEmpty
            If %(EventClass_nMassEM) < 0.01
                Let moonmass = %(EventClass_nMassEM)/0.0123
                Set speech += %expand(say_ScanPlanetMoonMass)
            Else
                Set speech += %expand(say_ScanPlanetMass)

        If EventClass_nRadius IsNotEmpty And EventClass_nRadius > 0
            Let radius = %(EventClass_nRadius)/1000.0
            Set speech += %expand(say_ScanPlanetRadius)

        If EventClass_nSurfaceGravity IsNotEmpty
            Let gravity = %(EventClass_nSurfaceGravity)/9.8
            Set speech += %expand(say_ScanPlanetGravity)

        If EventClass_nSurfaceTemperature IsNotEmpty
            Set speech += %expand(say_ScanPlanetTemperature)

        If %(EventClass_nSurfacePressure) IsNotEmpty And %(EventClass_nSurfacePressure) > 0
            Let atpressure = %(EventClass_nSurfacePressure)/101.325
            Set speech += %expand(say_ScanPlanetPressure)
        Else
            Set speech += %expand(say_ScanPlanetNoSurfacePressure)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetMaterialInformationEnable;
        If %(EventClass_MaterialsCount) > 0
            Set speech += %expand(say_ScanPlanetMaterials)

    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// SellExplorationData
// Events: SellExplorationData
//*************************************************************
PROGRAM SellExplorationData

Set speech = "%phrase(\"%expand(say_SellExplorationData)\")"

If EventClass_Discovered_Length >= 1
    Set speech += " %phrase(\"%expand(say_SellExplorationDataBonus)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MultiSellExplorationData
// Events: MultiSellExplorationData
//*************************************************************
PROGRAM MultiSellExplorationData

Set speech = "%phrase(\"%expand(say_MultiSellExplorationData)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Interdiction
// Events: Interdiction
//*************************************************************
PROGRAM Interdiction

If EventClass_Success IsTrue
    Set speech = "%phrase(\"%expand(say_InterdictionSuccess)\")"
Else
    Set speech = "%phrase(\"%expand(say_InterdictionFailure)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MarketSell
// Events: MarketSell
//*************************************************************
PROGRAM MarketSell

Let profit = (%(EventClass_SellPrice)-%(EventClass_AvgPricePaid))*%(EventClass_Count)
Set speech = "%phrase(\"%expand(say_MarketSell)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MarketSell
// Events: MarketSell
//*************************************************************
PROGRAM FSSAllBodiesFound

if FSSAllBodiesFoundAllowed NotPresent Or FSSAllBodiesFoundAllowed == 1
	Set speech = "%phrase(\"%expand(say_FSSAllBodiesFound)\")"
	Call speak(speech="%(speech)")
	Static FSSAllBodiesFoundAllowed = 0

END PROGRAM

//*************************************************************
// Friends
// Events: Friends
//*************************************************************
PROGRAM Friends

If EventClass_Status $== ""
    If SpeechControls IsPresent And SpeechControls Contains FriendsStatusDisable;
        Rem no output
    Else
        Let online = %(EventClass_OnlineCount)
        Let offline = %(EventClass_OfflineCount)
        Let totalother = %(EventClass_StatusListCount) - %(offline) - %(online)

        Static say_FriendsSummation $= "%ifnonzero(online,'%(online) %ifgt(online,\'1\',\'friends are\',\'friend is\') online.') "
        Static say_FriendsSummation $+= "%ifnonzero(offline,'%(offline) %ifgt(offline,\'1\',\'friends\',\'friend\') have gone offline.') "
        Static say_FriendsSummation $+= "%ifnonzero(totalother,'%(totalother) %ifgt(totalother,\'1\',\'other statuses are\',\'other status is\') available.') "
        // print %expand(say_FriendsSummation)

        Set speech = "%phrase(\"%expand(say_FriendsSummation)\")"
        Call speak(speech="%(speech)", QueueLimit="2000" )
Else
    If (EventClass_Status $== Online Or EventClass_Status $== Offline) And (SpeechControls IsPresent And SpeechControls Contains FriendsStatusDisable;)
        Rem Print mute Friends $(EventClass_Status) of $(EventClass_Name)
    Else
        Call GenericResponse(EventClass_*=Pass,Trigger*=Pass,QueueLimit="2000")

END PROGRAM

//*************************************************************
// FSSSignalDiscovered
// Events: FSSSignalDiscovered(QueueLimit=4000)
//*************************************************************
PROGRAM FSSSignalDiscovered

If EventClass_SignalsCount == 1
    Set speech = "%phrase(\"%expand(say_FSSSignalDiscovered1)\")"
Else
    Set speech = "%phrase(\"%expand(say_FSSSignalDiscoveredN)\")"

Call speak(speech="%(speech)", QueueLimit="2000" )

END PROGRAM

//*************************************************************
// SaySystemInfo
// Events: onSayFinished?(EventName $== FSD), onKeyPress?(KeyPress $== Alt+F11), onTimer?(TimerName $== ScanDelay)
//*************************************************************
PROGRAM SaySystemInfo

// Print SaySysInfo %(ScanSystem) %(TriggerName)

If EventStarSystem NotPresent                                   // due to being driven direct by a key, instead of via FSD..
    Event THPOS
    Static ScanSystem = %(EC_StarSystem)

If TriggerName $== onSayFinished                                // Trigger!
    Timer ScanDelay,"%eval(\"%random(10)*10+20\")"
    End
ElseIf SpeechControls NotPresent Or SpeechControls NotContains EDSMInformationDisable;
    Scan EDSM  "%(ScanSystem)"
    // pragma dumpvars S_*

    Set speech = ""

    If S_Stars == 0
        Set speech += "%phrase(\"%expand(say_edsmscannoinfo)\")"
    ElseIf SpeechControls IsPresent And SpeechControls Contains EDSMSummaryEnable;
        Let totalstars = 0
        Let totalplanets = 0

        Loop %(S_Stars),N
            Set prefix = S_Star_%(N)_
            Set type = "%indirect(\"%(prefix)type\")"
            If type $!= barycentre
                Let totalstars = %(totalstars)+1

            Set planets = "%indirect(\"%(prefix)Planets_Only\")"
            Let totalplanets = %(totalplanets)+%(planets)

        Set speech += "%phrase(\"%expand(say_edsmscanstarsplanets)\")"
    Else
        Set excludestars = "%existsdefault(SpeechEDSMStarExclusion,\"\")"

        Loop %(S_Stars),S
            Set prefix = S_Star_%(S)_
            Set planets = "%indirect(\"%(prefix)Planets\")"
            Set data = "%indirect(\"%(prefix)data\")"
            Set type = "%indirect(\"%(prefix)type\")"
            Set ownname = "%indirect(\"%(prefix)assignedname\")"
            Set starbodyname = "%indirect(\"%(prefix)bodyname\")"
            Set value = "%indirect(\"%(prefix)value\")"

            Let exclude = 0

            If type $== barycentre
                Set speech += %expand(say_edsmscanstarbarycentre)
            ElseIf data IsTrue
                Set starclass = "%indirect(\"%(prefix)startype\")"
                Set startype = "%indirect(\"%(prefix)startypetext\")"
                Set mass = "%indirect(\"%(prefix)stellarmass\")"

                Rem we are going to look for A, ,A or just A

                If excludestars Contains %(starclass), Or excludestars Contains ,%(starclass) Or excludestars $== %(starclass)
                    Let exclude = 1
                Else
                    Set speech += %expand(say_edsmscanstarinfo)
            Else
                Set speech += %expand(say_edsmscanstarnoinfo)

            If exclude IsFalse
                Loop %(planets),P
                    Set prefix = S_Planet_%(S)_%(P)_
                    Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                    Set speech += %(ReturnValue)

                    If SpeechControls IsPresent And SpeechControls Contains EDSMMoonsEnable;
                        Set moons = "%indirect(\"%(prefix)Moons\")"

                        Loop %(moons),M
                            Set prefix = S_Moon_%(S)_%(P)_%(M)_
                            Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                            Set speech += %(ReturnValue)

                            If SpeechControls IsPresent And SpeechControls Contains EDSMSubMoonsEnable;
                                Set submoons = "%indirect(\"%(prefix)Submoons\")"

                                Loop %(submoons),SM
                                    Set prefix = S_SubMoon_%(S)_%(P)_%(M)_%(SM)_
                                    Call saySystemInfoBody(prefix="%(prefix)",starname="%(starbodyname)",S_*$=1)
                                    Set speech += %(ReturnValue)

    If speech IsNotEmpty                                        // Because we may have decided not to say anything!
        Set speech = "%replacevar(speech,\"say_tx\")"
        Say %(speech),Priority=Low,Literal=1

END PROGRAM

//*************************************************************
// saySystemInfoBody
//*************************************************************
PROGRAM saySystemInfoBody

Rem prefix in, plus all S_ variables

Set pdata = "%indirect(\"%(prefix)data\")"

If pdata IsTrue
    Set pname = "%indirect(\"%(prefix)bodyname\")"
    // Print %(prefix) %(pname) %(starname)
    Set isstar = "%indirect(\"%(prefix)isstar\")"

    Rem print %(prefix) %(pname) star %(isstar)

    If isstar IsTrue
        Set stype = "%indirect(\"%(prefix)startypetext\")"
        Set mass = "%indirect(\"%(prefix)stellarmass\")"
        Set value = "%indirect(\"%(prefix)value\")"
        Return %expand(say_edsmscanbodystarinfo)

    Else
        Set terraform = "%indirect(\"%(prefix)terraformstate\")"
        Set class = "%indirect(\"%(prefix)class\")"
        Set landable = "%indirect(\"%(prefix)landable\")"
        Set value = "%indirect(\"%(prefix)value\")"
        Set pname = %replace(pname,starname,'')

        Set speech = %expand(say_edsmscanbodyinfo)

        If SpeechControls IsPresent And SpeechControls Contains EDSMAtmosphereEnable;
            Set atmos = "%indirect(\"%(prefix)atmosphere\")"
            Set speech += %expand(say_edsmscanbodyinfoAtmos)

        If SpeechControls IsPresent And SpeechControls Contains EDSMVolcanismEnable;
            Set volcanism = "%indirect(\"%(prefix)volcanism\")"
            Set speech += %expand(say_edsmscanbodyinfoVolcanism)

        If SpeechControls IsPresent And SpeechControls Contains EDSMMaterialsEnable;
            Set matcount = "%indirect(\"%(prefix)MaterialsCount\")"
            If matcount > 0
                Set speech += %expand(say_edsmscanbodyinfoMat)
                Set speech += "%ExpandVars(\"%(prefix)Materials_\",\", \",1,1000,\"nameonly splitcaps\")"

        Set speech += ". "
        Return %(speech)
Else
    Set ownname = "%indirect(\"%(prefix)assignedname\")"
    Return %expand(say_edsmscanbodynoinfo)

END PROGRAM

//*************************************************************
// EDSMSync
// Events: onEDSMSync
//*************************************************************
PROGRAM EDSMSync

If EventStarList $!= ""
    Set speech = "%phrase(\"%expand(say_EDSM)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// EGOSync
// Events: onEGOSync
//*************************************************************
PROGRAM EGOSync

If EventStarList $!= ""
    Set speech = "%phrase(\"%expand(say_EGO)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains VoiceMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains ConfigureVoice
    Perform ConfigureVoice "Configure Voice Synthesis"

If MenuName Contains ConfigureSpeechFile
    Perform EditSpeechText

If MenuName Contains ConfigureNPCVoices
	Perform voicenames	// get the current list.. VoiceNames is quoted
    Let voicecount = %WordListCount(VoiceNames)
	let i = 0
	let vpos = 30
	let width = 300
	while i < %(voicecount)
		set voicename=  %WordListEntry(VoiceNames,i)
		let present = 0
		if NPCVoiceNames contains '"%(voicename)"'
			let present = 1
		rem print Voice %(voicename)
		set dvar%(i) = '%(i),CheckBox,"%(voicename)",10,%(vpos),%eval(%(width)-10-10),20,"Select",%(present)'
		let vpos = %(vpos) + 24
		let i = %(i)+1
	
	Set dvarok = "OK,Button,\"OK\",%eval(%(width)-100),+40,80,20,\"Press for OK\""
    Set dvarcancel = "Cancel,Button,\"Cancel\",%eval(%(width)-200),+0,80,20,\"Press for Cancel\""

	rem pragma dumpvars dvar*

    Dialog D1, "NPC Voice Configuration", "10,10", dvar

    While D1 $!= Cancel And D1 $!= Escape
		If D1 $== OK
			let i = 0
			set newvoicename=""
			while i < %(voicecount)
				set voicename=  %WordListEntry(VoiceNames,i)
				DialogControl D1,Get "%(i)"
				If DialogResult == 1
					if newvoicename $!= ""
						set newvoicename = '%(newvoicename),"%(voicename)"'
					else
						set newvoicename = '"%(voicename)"'
				let i = %(i)+1
			//print Selected voices %(newvoicename)
			// delete the variable in case its static, then set up
			DeleteVariable NPCVoiceNames		
			PersistentGlobal NPCVoiceNames = %(newvoicename)
			//print Selection now %(NPCVoiceNames)
			Break
		else
			DialogControl D1,Continue
	Rem End While

If MenuName Contains ShowHelp
    MessageBox "Voice Pack (C) ED Discovery team\r\n\r\nUse Add-Ons | Manage to enable or disable this\r\nUse the speech configuration options in the Add-Ons menu to configure voice\r\nand set voice pack options","Voice Pack"

If MenuName Contains ConfigureVerbosity

    Set lab = 10
    Set labw = 140
    Set col1 = 150
    Set col2 = 400
    Set col3 = 650
    Set colw = 240
    Set ls = +30
    Set lsm = +40
    Set width = 1000
    Set Def = ""
    Set dvar1a = "L2,Label,\"Speech file\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar1b = "TBLF,TextBox,\"%existsdefault(SpeechLog,Def)\",%(col1),+0,%(colw),20,\"Empty means no speech file, else enter the file or use browse\""
    Set dvar1c = "BBROWSE,Button,Browse,%(col2),+0,78,20,\"Select file to write speech output to\""

    Set dvar2a = "CBPR,CheckBox,\"Print date/time in log\",%(col1),%(ls),%(colw),20,\"Print time and date before text\",%IsPresent(SpeechControls,\"LogTimeDate;\",0)"
    Set dvar2b = "CBLL,CheckBox,\"Log Last only\",%(col2),+0,%(colw),20,\"Clear log before each speech output\",%IsPresent(SpeechControls,\"LogLastOnly;\",0)"

    Set dvar3a = "L2,Label,\"General\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar3b = "CBD,CheckBox,\"Disable Voice Output\",%(col1),+0,%(colw),20,\"Disable Voice Output, use to print only\",%IsPresent(SpeechControls,\"PrintOnly;\",0)"
    Set dvar3c = "CBSSML,CheckBox,\"Disable SSML\",%(col2),+0,%(colw),20,\"Disable SSML (Requires Restart of ED)\",%IsPresent(SpeechControls,\"SSMLDisable;\",0)"
    Set dvar3d = "CBWEL,CheckBox,\"Disable Welcome Msg\",%(col3),+0,%(colw),20,\"Disable the welcome message\",%IsPresent(SpeechControls,\"WelcomeMessageDisable;\",1)"

    Set dvar4a = "L3,Label,\"Friends\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar4b = "CBFR,CheckBox,\"Disable Friend Status\",%(col1),+0,%(colw),20,\"Friend status online/offline is muted\",%IsPresent(SpeechControls,\"FriendsStatusDisable;\",1)"

    Set dvar5a = "L3,Label,\"Texts\",%(lab),%(lsm),%(labw),20,\"\""
    Let npcdisable = "!%IsPresent(SpeechControls,\"NPCChatterDisable;\",0)"

    Set dvar5b = "CBN1,CheckBox,\"Enable NPC Texts\",%(col1),+0,%(colw),20,\"Enable all NPC Texts\",%(npcdisable)"    // name kept for backwards compat
    Set dvar5c = "CBNS,CheckBox,\"Disable NPC Sounds\",%(col2),+0,%(colw),20,\"Disable Intro/Out sounds on NPC Texts\",%IsPresent(SpeechControls,\"NPCSoundsDisable;\",1)"
    Set dvar5d = "CBNMV,CheckBox,\"NPC Different Voices\",%(col3),+0,%(colw),20,\"Pick different voices for each NPC\",%IsPresent(SpeechControls,\"NPCVoicesEnable;\",1)"

    Set dvar5e = "CBN2,CheckBox,\"Enable Squadron Texts\",%(col1),%(ls),%(colw),20,\"Enable all Squadron Texts\",%IsPresent(SpeechControls,\"SquadronTextsEnable;\",0)"
    Set dvar5f = "CBN3,CheckBox,\"Enable Wing Texts\",%(col2),+0,%(colw),20,\"Enable all Wing Texts\",%IsPresent(SpeechControls,\"WingTextsEnable;\",0)"
    Set dvar5g = "CBN4,CheckBox,\"Enable Local Texts\",%(col3),+0,%(colw),20,\"Enable all Local Texts\",%IsPresent(SpeechControls,\"LocalTextsEnable;\",0)"

    Set dvar5h = "CBN5,CheckBox,\"Enable Friend Texts\",%(col1),%(ls),%(colw),20,\"Enable all Friend Texts\",%IsPresent(SpeechControls,\"FriendTextsEnable;\",0)"
    Set dvar5j = "CBN6,CheckBox,\"Enable VoiceChat Texts\",%(col2),+0,%(colw),20,\"Enable all Voice Chat Texts\",%IsPresent(SpeechControls,\"VoiceChatTextsEnable;\",0)"
    Set dvar5k = "CBN7,CheckBox,\"Enable StarSystem Texts\",%(col3),+0,%(colw),20,\"Enable all Star System Texts\",%IsPresent(SpeechControls,\"StarSystemTextsEnable;\",0)"

    Set dvar5m = "CBN8,CheckBox,\"Enable Player Texts\",%(col1),%(ls),%(colw),20,\"Enable all Player Texts\",%IsPresent(SpeechControls,\"PlayerTextsEnable;\",0)"
    Set dvar5n = "CBN9,CheckBox,\"Enable Any Other Texts\",%(col2),+0,%(colw),20,\"Enable any other types of Texts\",%IsPresent(SpeechControls,\"AnyOtherTextsEnable;\",0)"

    Set dvar6a = "L3,Label,\"FSD Jump\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar6b = "CBF,CheckBox,\"System Info first jump only\",%(col1),+0,%(colw),20,\"Say system information on first jump to system only\",%IsPresent(SpeechControls,\"FirstJumpOnly;\",0)"
    Set dvar6c = "CBFL,CheckBox,\"Disable fuel level reports\",%(col2),+0,%(colw),20,\"Disable Fuel Level Reports\",%IsPresent(SpeechControls,\"FuelLevelDisable;\",0)"
    Set dvar6d = "CBFR,CheckBox,\"Disable faction reports\",%(col3),+0,%(colw),20,\"Disable Faction reporting on FSD jumps\",%IsPresent(SpeechControls,\"FSDFactionDisable;\",0)"

    Set dvar7a = "L3,Label,\"Exclude Stars Types\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar7b = "TBSTAR,TextBox,\"%existsdefault(SpeechEDSMStarExclusion,Def)\",%(col1),+0,%(colw),20,\"Exclude these stars from the read out of system information read after jumping, star types OBAFGKM, H,N,TTS, Wx etc, comma or space separated\""

    Set dvar8a = "L3,Label,\"Scan\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar8b = "CBSM,CheckBox,\"Disable Star Mass/Mag\",%(col1),+0,%(colw),20,\"Disable Scan reports of stars mass and mag\",%IsPresent(SpeechControls,\"ScanStarMassDisable;\",0)"
    Set dvar8c = "CBSH,CheckBox,\"Enable Star HabZone\",%(col2),+0,%(colw),20,\"Enable Scan reports of stars hab zone\",%IsPresent(SpeechControls,\"ScanHabZoneEnable;\",0)"
    Set dvar8c1 = "CBSAS,CheckBox,\"Enable Auto Scan\",%(col3),+0,%(colw),20,\"Enable saying auto scanned entries\",%IsPresent(SpeechControls,\"ScanAutoScanEnable;\",0)"

    Set dvar8d = "CBPB,CheckBox,\"Disable Planet Basic\",%(col1),%(ls),%(colw),20,\"Disable Scan reports of planets Landable state, atmosphere\",%IsPresent(SpeechControls,\"ScanPlanetBasicInformationDisable;\",0)"
    Set dvar8e = "CBPCR,CheckBox,\"Disable Credits\",%(col2),+0,%(colw),20,\"Enable Credit reports\",%IsPresent(SpeechControls,\"ScanPlanetCreditsDisable;\",0)"
    Set dvar8f = "CBPDS,CheckBox,\"Disable Distance\",%(col3),+0,%(colw),20,\"Enable Distance reports\",%IsPresent(SpeechControls,\"ScanPlanetDistanceDisable;\",0)"

    Set dvar8g = "CBPF,CheckBox,\"Enable Planet Extended\",%(col1),%(ls),%(colw),20,\"Enable Scan reports of planets extended info\",%IsPresent(SpeechControls,\"ScanPlanetExtendedInformationEnable;\",0)"
    Set dvar8h = "CBPM,CheckBox,\"Enable Planet Materials\",%(col2),+0,%(colw),20,\"Enable Scan reports of planets materials info\",%IsPresent(SpeechControls,\"ScanPlanetMaterialInformationEnable;\",0)"
    Set dvar8i = "CBBC,CheckBox,\"Enable Belt Clusters\",%(col3),+0,%(colw),20,\"Enable Scan reports of Belt Clusters\",%IsPresent(SpeechControls,\"ScanPlanetBeltClusters;\",0)"

    Set dvar9a = "L3,Label,\"EDSM\",10,%(lsm),80,20,\"\""
    Set dvar9b = "CBED,CheckBox,\"Disable EDSM info\",%(col1),+0,%(colw),20,\"Disable all EDSM lookup of system info\",%IsPresent(SpeechControls,\"EDSMInformationDisable;\",0)"
    Set dvar9c = "CBES,CheckBox,\"Short Summary\",%(col2),+0,%(colw),20,\"Produce a short summary instead of the full info\",%IsPresent(SpeechControls,\";EDSMSummaryEnable\",0)"
    Set dvar9d = "CBEM,CheckBox,\"Moon information\",%(col3),+0,%(colw),20,\"Say moon information\",%IsPresent(SpeechControls,\";EDSMMoonsEnable\",0)"
    Set dvar9e = "CBESM,CheckBox,\"Sub moon information\",%(col1),%(ls),%(colw),20,\"Say sub moon information\",%IsPresent(SpeechControls,\";EDSMSubMoonsEnable\",0)"
    Set dvar9f = "CBEAT,CheckBox,\"Atmosphere information\",%(col2),+0,%(colw),20,\"Say atmosphere information for planets\",%IsPresent(SpeechControls,\";EDSMAtmosphereEnable\",1)"
    Set dvar9g = "CBEVC,CheckBox,\"Volcanism information\",%(col3),+0,%(colw),20,\"Say volcanism information for planets\",%IsPresent(SpeechControls,\";EDSMVolcanismEnable\",1)"
    Set dvar9h = "CBEMA,CheckBox,\"Materials information\",%(col1),%(ls),%(colw),20,\"Say materials information for planets\",%IsPresent(SpeechControls,\";EDSMMaterialsEnable\",0)"

    Set dvar10a = "L3,Label,\"Nav Beacon\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar10b = "CBXNav,ComboBox,\"%ExistsDefault(SpeechNavBeacon,'Summary')\",%(col1),+0,%(colw),20,\"Select what is spoken after a navigation beacon is scanned\",Summary,No Speech on Scan,Full Scan Speech"

    Set dvar11a = "L3,Label,\"Targetting\",%(lab),%(lsm),%(labw),20,\"\""
    Set dvar11b = "CBTarget,CheckBox,\"Disable Target Reports\",%(col1),+0,%(colw),20,\"Disable all reporting of targetting ships\",%IsPresent(SpeechControls,\"TargetReportingDisabled;\",0)"

    Set dvarok = "OK,Button,\"OK\",%eval(%(width)-140),%(lsm),120,20,\"Press for OK\""
    Set dvarcancel = "Cancel,Button,\"Cancel\",%eval(%(width)-280),+0,120,20,\"Press for Cancel\""

    Dialog D1, "Voice Pack Configuration", "%(width),750", dvar

    While D1 $!= Cancel And D1 $!= Escape
        If D1 $== BBROWSE
            FileDialog savefile,c:,"Log files|*.log|All Files|*.*",*.log,on
            If FileName IsNotEmpty
                DialogControl D1,Set TBLF=%(FileName)

        If D1 $== OK
            Let good = 1

            PersistentGlobal SpeechControls = ""

            // in order
            Call SetSO(ctrl="CBPR",flag="LogTimeDate;")
            Call SetSO(ctrl="CBLL",flag="LogLastOnly;")
            Call SetSO(ctrl="CBD",flag="PrintOnly;")

            Call SetSO(ctrl="CBFR",flag="FriendsStatusDisable;")
            Call SetSO(ctrl="CBWEL",flag="WelcomeMessageDisable;")

            Call SetSO(ctrl="CBSSML",flag="SSMLDisable;")

            Call SetSO(ctrl="CBN1",flag="NPCChatterDisable;",State=0)
            Call SetSO(ctrl="CBNS",flag="NPCSoundsDisable;")
            Call SetSO(ctrl="CBN2",flag="SquadronTextsEnable;")
            Call SetSO(ctrl="CBN3",flag="WingTextsEnable;")
            Call SetSO(ctrl="CBN4",flag="LocalTextsEnable;")
            Call SetSO(ctrl="CBN5",flag="FriendTextsEnable;")
            Call SetSO(ctrl="CBN6",flag="VoiceChatTextsEnable;")
            Call SetSO(ctrl="CBN7",flag="StarSystemTextsEnable;")
            Call SetSO(ctrl="CBN8",flag="PlayerTextsEnable;")
            Call SetSO(ctrl="CBN9",flag="AnyOtherTextsEnable;")
            Call SetSO(ctrl="CBNMV",flag="NPCVoicesEnable;")

            Call SetSO(ctrl="CBF",flag="FirstJumpOnly;")
            Call SetSO(ctrl="CBFL",flag="FuelLevelDisable;")
            Call SetSO(ctrl="CBFR",flag="FSDFactionDisable;")

            Call SetSO(ctrl="CBSM",flag="ScanStarMassDisable;")
            Call SetSO(ctrl="CBSH",flag="ScanHabZoneEnable;")
            Call SetSO(ctrl="CBSAS",flag="ScanAutoScanEnable;")
            Call SetSO(ctrl="CBPB",flag="ScanPlanetBasicInformationDisable;")
            Call SetSO(ctrl="CBPCR",flag="ScanPlanetCreditsDisable;")
            Call SetSO(ctrl="CBPDS",flag="ScanPlanetDistanceDisable;")
            Call SetSO(ctrl="CBPF",flag="ScanPlanetExtendedInformationEnable;")
            Call SetSO(ctrl="CBPM",flag="ScanPlanetMaterialInformationEnable;")
            Call SetSO(ctrl="CBBC",flag="ScanPlanetBeltClusters;")

            Call SetSO(ctrl="CBED",flag="EDSMInformationDisable;")
            Call SetSO(ctrl="CBES",flag="EDSMSummaryEnable;")
            Call SetSO(ctrl="CBEM",flag="EDSMMoonsEnable;")
            Call SetSO(ctrl="CBESM",flag="EDSMSubMoonsEnable;")
            Call SetSO(ctrl="CBEAT",flag="EDSMAtmosphereEnable;")
            Call SetSO(ctrl="CBEVC",flag="EDSMVolcanismEnable;")
            Call SetSO(ctrl="CBEMA",flag="EDSMMaterialsEnable;")

            Call SetSO(ctrl="CBTarget",flag="TargetReportingDisabled;")

            Rem print Result %(SpeechControls)

            DialogControl D1,Get TBSTAR
            PersistentGlobal SpeechEDSMStarExclusion = %(DialogResult)

            DialogControl D1,Get CBXNav
            PersistentGlobal SpeechNavBeacon = %(DialogResult)

            DialogControl D1,Get TBLF
            If DialogResult IsNotEmpty And good IsTrue
                If %fileexists(DialogResult) IsTrue
                    PersistentGlobal SpeechLog = %(DialogResult)
                Else
                    Let success = %openfile(h1,DialogResult,create)
                    If success IsTrue
                        // Print test write to %(DialogResult)
                        Expr %writeline(h1,"Speech output file")
                        Expr %closefile(h1)
                        PersistentGlobal SpeechLog = %(DialogResult)
                    Else
                        MessageBox "Speech Log path not valid","Incorrect filename given"
                        Let good = 0
            Else
                PersistentGlobal SpeechLog = ""

            If good IsTrue
                Break

        DialogControl D1,Continue

    DialogControl D1, Close

END PROGRAM

//*************************************************************
// SetSO
//*************************************************************
PROGRAM SetSO

If State NotPresent
    Let State = 1
DialogControl D1,Get %(ctrl)
If DialogResult == %(State)
    PersistentGlobal SpeechControls += %(flag)

END PROGRAM

//*************************************************************
// GenericResponse
// Events: Bounty, BuyAmmo, CapShipBond, CockpitBreached(Volume=100), DockFighter, EscapeInterdiction, FactionKillBond,
// Events: FighterDestroyed, FighterRebuilt, Interdicted, LaunchFighter, PayFines, PayBounties, PayLegacyFines, PVPKill,
// Events: RedeemVoucher, Scanned, CollectCargo, CommunityGoalDiscard, CommunityGoalJoin, CommunityGoalReward, ChangeCrewRole,
// Events: CrewAssign, CrewFire, CrewHire, CrewLaunchFighter, CrewMemberJoins, CrewMemberRoleChange, CrewMemberQuits,
// Events: EndCrewSession, JoinACrew, KickCrewMember, NpcCrewPaidWage, NpcCrewRank, QuitACrew, EngineerApply, EngineerCraft,
// Events: EngineerContribution, EngineerProgress, EngineerLegacyConvert, Synthesis, TechnologyBroker, BuyExplorationData,
// Events: CodexEntry, DiscoveryScan, FSSAllBodiesFound, FSSDiscoveryScan, SAAScanComplete, ApproachBody(QueueLimit=5000),
// Events: ApproachSettlement(QueueLimit=1000), Docked, DockingCancelled, DockingDenied, DockingRequested, DockingTimeout,
// Events: DockSRV, FuelScoop(QueueLimit=3000), JetConeBoost, JetConeDamage, LeaveBody(QueueLimit=5000), LaunchSRV, Liftoff,
// Events: StartJump, SupercruiseEntry, Touchdown, Undocked, USSDrop, MissionAbandoned, MissionAccepted, MissionCompleted,
// Events: MissionFailed, MissionRedirected, AsteroidCracked, MiningRefined, MaterialCollected, MaterialDiscarded,
// Events: MaterialDiscovered, MaterialTrade, ClearSavedGame, Died, DatalinkScan, DatalinkVoucher, DataScanned, Promotion,
// Events: Resurrect, ScientificResearch, Screenshot, SearchAndRescue, SendText, PowerplayCollect, PowerplayDefect,
// Events: PowerplayDeliver, PowerplayFastTrack, PowerplayJoin, PowerplayLeave, PowerplaySalary, PowerplayVote, PowerplayVoucher,
// Events: AfmuRepairs, BuyDrones, FetchRemoteModule, HeatDamage, HeatWarning, LaunchDrone, MassModuleStore, ModuleBuy,
// Events: ModuleRetrieve, ModuleSell, ModuleSellRemote, ModuleStore, ModuleSwap, SellShipOnRebuy, SellDrones, SetUserShipName,
// Events: ShipyardBuy, ShipyardNew, ShipyardSell, ShipyardSwap, ShipyardTransfer, SRVDestroyed, RebootRepair, RefuelAll,
// Events: RefuelPartial, Repair, RepairDrone, RepairAll, RestockVehicle, SelfDestruct, SystemsShutdown, VehicleSwitch,
// Events: AppliedToSquadron, DisbandedSquadron, InvitedToSquadron, JoinedSquadron, KickedFromSquadron, LeftSquadron,
// Events: SharedBookmarkToSquadron, SquadronCreated, SquadronDemotion, SquadronPromotion, WonATrophyForSquadron, BuyTradeData,
// Events: CargoDepot, EjectCargo, MarketBuy, WingAdd, WingJoin, WingLeave, WingInvite,
// Events: onTimer?(TimerName Contains VoicePackGenericDelay)
//*************************************************************
PROGRAM GenericResponse

Rem mandatory: Event Variables..
Rem optional: QueueLimit
Rem optional: Prior
Rem optional: Volume
rem pragma dumpvars Event*

Set v = say_%(EventClass_EventTypeStr)
Set speech = "%phrase(\"%indirect(v)\")"                        // now expand any phrases in it

If speech IsNotEmpty
    Set prior = "%existsdefault(Priority,\"Normal\")"           // pick up config variables
    Set queuelimit = %existsdefault(QueueLimit,'0')
    Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")

END PROGRAM

//*************************************************************
// GenericResponseUI
// Events: UILights(QueueLimit=2000), UIFireGroup(QueueLimit=200), UIShieldsUp(QueueLimit=2000), UILandingGear(QueueLimit=2000),
// Events: UIHardpointsDeployed(QueueLimit=2000), UIInWing(QueueLimit=2000), UICargoScoopDeployed(QueueLimit=2000),
// Events: UISilentRunning(QueueLimit=2000), UIScoopingFuel(QueueLimit=2000), UISrvHandbrake(QueueLimit=2000),
// Events: UISrvTurret(QueueLimit=2000), UISrvUnderShip(QueueLimit=2000,MaxRepeat=20000),
// Events: UIFsdMassLocked(QueueLimit=2000,MaxRepeat=20000), UIFsdCharging(QueueLimit=2000), UIFsdCooldown(QueueLimit=2000),
// Events: UILowFuel, UIOverHeating(QueueLimit=5000), UIBeingInterdicted,
// Events: UIShipTargeted?(EventClass_ShipTargeted_TargetLocked == 0)
//*************************************************************
PROGRAM GenericResponseUI

Rem Input variables:
Rem mandatory: Event Variables..
Rem optional: QueueLimit - maximum queue allowed
Rem optional: Priority - priority of speech
Rem optional: Volume - % of volume, 0 -100.
Rem optional: MaxRepeat - maximum repeat rate (10s means don't say more than 10s apart)

Rem Pragma dumpvars EventClass* dumpvars Max*

If MaxRepeat IsPresent                                          // MaxRepeat prevents a message being said more than MaxRepeat ms.
    Set maxrepeatvar = MaxRepeatLastTime_%(EventClass_EventTypeStr)
    Set lasttime = 0
    If %Exist(%(maxrepeatvar)) IsTrue
        Set lasttime = %expand(%(maxrepeatvar))

    Set curtime = %TickCount()
    Let timedelta = %(curtime) - %(lasttime)
    Rem print last = %(lasttime) cur = %(curtime) delta = %(timedelta)  MaxRepeat = %(MaxRepeat)

    If timedelta < %(MaxRepeat)
        Rem print Rejecting due to too quick
        Return
    Else
        Static %(maxrepeatvar) = %(curtime)

If %(EventClass_EventRefresh) IsFalse                           // not on a UI refresh event which occurs when change vehicle
    Set v = say_UI%(EventClass_EventTypeStr)
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it

    If speech IsNotEmpty
        Set prior = "%existsdefault(Priority,\"Normal\")"       // pick up config variables
        Set queuelimit = %existsdefault(QueueLimit,'0')
        Call speak(speech="%(speech)",Volume="%existsdefault(Volume,'-999')",Priority="%(prior)", QueueLimit="%(queuelimit)")

END PROGRAM

//*************************************************************
// GenericDelayedResponse
// Events: DockingGranted(Delay=10000)
//*************************************************************
PROGRAM GenericDelayedResponse

Rem Delay gives delay in ms before the timer triggers with the TimerName of VoicePack.. and Event variables set to the Event which triggered it.

Timer VoicePackGenericDelay%(EventClass_EventTypeStr),%(Delay),%(EventJID)

END PROGRAM

//*************************************************************
// speak
//*************************************************************
PROGRAM speak

Rem required: speech
Rem optional: Volume, QueueLimit, Priority, FinishEvent, Wait, Voice, PitchShift, PrefixSound, PostfixSound, MixSound, Rate

Set speech = "%replacevar(speech,\"say_tx\")"

Set ds = 0
If SpeechControls IsPresent And SpeechControls Contains PrintOnly;
    Set ds = 1

// if QueueLimit IsPresent
// print Queued %(QueueLimit) for %(speech)

Rem Print SAY: %(speech)
Rem pragma dumpvars Prior*

If PitchShift IsPresent                                         // if we have a pitch, give it to it
    Say %(speech), Literal=1, Voice="%existsdefault(Voice,\"\")", Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", QueueLimit="%existsdefault(QueueLimit,'0')", DontSpeak="%(ds)", FinishEvent="%existsdefault(FinishEvent,\"\")" , Wait="%existsdefault(Wait,\"0\")" , PitchShift ="%existsdefault(PitchShift,\"100\")" , PrefixSound ="%existsdefault(PrefixSound,\"\")" , PostfixSound ="%existsdefault(PostfixSound,\"\")" , MixSound ="%existsdefault(MixSound,\"\")" , Rate ="%existsdefault(Rate,\"-999\")"
Else                                                            // don't give it so it applies the standard SoundEffects variable
    Say %(speech), Literal=1, Voice="%existsdefault(Voice,\"\")", Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", QueueLimit="%existsdefault(QueueLimit,'0')", DontSpeak="%(ds)", FinishEvent="%existsdefault(FinishEvent,\"\")" , Wait="%existsdefault(Wait,\"0\")" , PrefixSound ="%existsdefault(PrefixSound,\"\")" , PostfixSound ="%existsdefault(PostfixSound,\"\")" , MixSound ="%existsdefault(MixSound,\"\")" , Rate ="%existsdefault(Rate,\"-999\")"

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechControls IsPresent And SpeechControls Contains LogLastOnly;
        Let success = %openfile(h1,SpeechLog,create)
    Else
        Let success = %openfile(h1,SpeechLog,append)

    If success IsTrue
        If SpeechControls IsPresent And SpeechControls Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(tolocal):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

//*************************************************************
// SayPhoneme
// Events: onKeyPress?(KeyPress $== Alt+F12)
//*************************************************************
PROGRAM SayPhoneme

// use to test phoneme list
// Foreach v in say_tx_star*
// Foreach v in say_tx_power*
// set exp = %indirect(v)
// set exp = %substring(exp,%indexof(exp,'<phoneme'),1000)
// say %(exp)

// Set str = "<phoneme alphabet='ipa' ph = 'ˈakɜːnɑ'>AchenarFailed </phoneme>"
// Set str = "<phoneme alphabet='ipa' ph = 'm'>Failed </phoneme>"
// Set str = <phoneme alphabet='x-sampa' ph='bd'>Failed 3</phoneme>
// Print %(str)
// Say "%(str)"
// Ivona British Amy not working with phonemes, tried various things, not working

InputBox "Enter phoneme","IPA:","%existsdefault(SayPhonemeLast,'')"
If InputBox1 IsPresent
    Global SayPhonemeLast = %(InputBox1)
    // Set str = <phoneme alphabet='ipa' ph = '%(InputBox1)'>Phoneme failed, this may be due to voice selected, for instance Ivona voices do not support all phonemes</phoneme>
    Print %(SayPhonemeLast)
    Say "%(SayPhonemeLast)"

END PROGRAM
